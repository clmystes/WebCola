{"version":3,"file":"cola.umd.development.js","sources":["../src/powergraph.ts","../src/linklengths.ts","../src/descent.ts","../src/vpsc.ts","../src/rbtree.ts","../src/rectangle.ts","../src/pqueue.ts","../src/shortestpaths.ts","../src/geom.ts","../src/handledisconnected.ts","../src/layout.ts","../src/adaptor.ts","../src/d3v3adaptor.ts","../src/d3Nextadaptor.ts","../src/d3adaptor.ts","../src/gridrouter.ts","../src/layout3d.ts","../src/batch.ts"],"sourcesContent":["import {LinkAccessor} from './linklengths'\n\nexport interface LinkTypeAccessor<Link> extends LinkAccessor<Link> {\n        // return a unique identifier for the type of the link\n        getType(l: Link): number;\n    }\n\n    export class PowerEdge {\n        constructor(\n            public source: any,\n            public target: any,\n            public type: number) { }\n    }\n\n    export class Configuration<Link> {\n        // canonical list of modules.\n        // Initialized to a module for each leaf node, such that the ids and indexes of the module in the array match the indexes of the nodes in links\n        // Modules created through merges are appended to the end of this.\n        modules: Module[];\n        // top level modules and candidates for merges\n        roots: ModuleSet[];\n        // remaining edge count\n        R: number;\n        constructor(n: number, edges: Link[], private linkAccessor: LinkTypeAccessor<Link>, rootGroup?: any[]) {\n            this.modules = new Array(n);\n            this.roots = [];\n            if (rootGroup) {\n                this.initModulesFromGroup(rootGroup);\n            } else {\n                this.roots.push(new ModuleSet());\n                for (var i = 0; i < n; ++i)\n                    this.roots[0].add(this.modules[i] = new Module(i));\n            }\n            this.R = edges.length;\n            edges.forEach(e => {\n                var s = this.modules[linkAccessor.getSourceIndex(e)],\n                    t = this.modules[linkAccessor.getTargetIndex(e)],\n                    type = linkAccessor.getType(e);\n                s.outgoing.add(type, t);\n                t.incoming.add(type, s);\n            });\n        }\n\n        private initModulesFromGroup(group): ModuleSet {\n            var moduleSet = new ModuleSet();\n            this.roots.push(moduleSet);\n            for (var i = 0; i < group.leaves.length; ++i) {\n                var node = group.leaves[i];\n                var module = new Module(node.id);\n                this.modules[node.id] = module;\n                moduleSet.add(module);\n            }\n            if (group.groups) {\n                for (var j = 0; j < group.groups.length; ++j) {\n                    var child = group.groups[j];\n                    // Propagate group properties (like padding, stiffness, ...) as module definition so that the generated power graph group will inherit it\n                    var definition = {};\n                    for (var prop in child)\n                        if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\n                            definition[prop] = child[prop];\n                    // Use negative module id to avoid clashes between predefined and generated modules\n                    moduleSet.add(new Module(-1-j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\n                }\n            }\n            return moduleSet;\n         }\n\n        // merge modules a and b keeping track of their power edges and removing the from roots\n        merge(a: Module, b: Module, k: number = 0): Module {\n            var inInt = a.incoming.intersection(b.incoming),\n                outInt = a.outgoing.intersection(b.outgoing);\n            var children = new ModuleSet();\n            children.add(a);\n            children.add(b);\n            var m = new Module(this.modules.length, outInt, inInt, children);\n            this.modules.push(m);\n            var update = (s: LinkSets, i: string, o: string) => {\n                s.forAll((ms, linktype) => {\n                    ms.forAll(n => {\n                        var nls = <LinkSets>n[i];\n                        nls.add(linktype, m);\n                        nls.remove(linktype, a);\n                        nls.remove(linktype, b);\n                        (<LinkSets>a[o]).remove(linktype, n);\n                        (<LinkSets>b[o]).remove(linktype, n);\n                    });\n                });\n            };\n            update(outInt, \"incoming\", \"outgoing\");\n            update(inInt, \"outgoing\", \"incoming\");\n            this.R -= inInt.count() + outInt.count();\n            this.roots[k].remove(a);\n            this.roots[k].remove(b);\n            this.roots[k].add(m);\n            return m;\n        }\n\n        private rootMerges(k: number = 0): {\n            id: number;\n            nEdges: number;\n            a: Module;\n            b: Module;\n        }[] {\n            var rs = this.roots[k].modules();\n            var n = rs.length;\n            var merges = new Array(n * (n - 1));\n            var ctr = 0;\n            for (var i = 0, i_ = n - 1; i < i_; ++i) {\n                for (var j = i+1; j < n; ++j) {\n                    var a = rs[i], b = rs[j];\n                    merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\n                    ctr++;\n                }\n            }\n            return merges;\n        }\n\n        greedyMerge(): boolean {\n            for (var i = 0; i < this.roots.length; ++i) {\n                // Handle single nested module case\n                if (this.roots[i].modules().length < 2) continue;\n\n                // find the merge that allows for the most edges to be removed.  secondary ordering based on arbitrary id (for predictability)\n                var ms = this.rootMerges(i).sort((a, b) => a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges);\n                var m = ms[0];\n                if (m.nEdges >= this.R) continue;\n                this.merge(m.a, m.b, i);\n                return true;\n            }\n        }\n\n        private nEdges(a: Module, b: Module): number {\n            var inInt = a.incoming.intersection(b.incoming),\n                outInt = a.outgoing.intersection(b.outgoing);\n            return this.R - inInt.count() - outInt.count();\n        }\n\n        getGroupHierarchy(retargetedEdges: PowerEdge[]): any[]{\n            var groups = [];\n            var root = {};\n            toGroups(this.roots[0], root, groups);\n            var es = this.allEdges();\n            es.forEach(e => {\n                var a = this.modules[e.source];\n                var b = this.modules[e.target];\n                retargetedEdges.push(new PowerEdge(\n                    typeof a.gid === \"undefined\" ? e.source : groups[a.gid],\n                    typeof b.gid === \"undefined\" ? e.target : groups[b.gid],\n                    e.type\n                ));\n            });\n            return groups;\n        }\n\n        allEdges(): PowerEdge[] {\n            var es = [];\n            Configuration.getEdges(this.roots[0], es);\n            return es;\n        }\n\n        static getEdges(modules: ModuleSet, es: PowerEdge[]) {\n            modules.forAll(m => {\n                m.getEdges(es);\n                Configuration.getEdges(m.children, es);\n            });\n        }\n    }\n\n    function toGroups(modules: ModuleSet, group, groups) {\n        modules.forAll(m => {\n            if (m.isLeaf()) {\n                if (!group.leaves) group.leaves = [];\n                group.leaves.push(m.id);\n            } else {\n                var g = group;\n                m.gid = groups.length;\n                if (!m.isIsland() || m.isPredefined()) {\n                    g = { id: m.gid };\n                    if (m.isPredefined())\n                        // Apply original group properties\n                        for (var prop in m.definition)\n                            g[prop] = m.definition[prop];\n                    if (!group.groups) group.groups = [];\n                    group.groups.push(m.gid);\n                    groups.push(g);\n                }\n                toGroups(m.children, g, groups);\n            }\n        });\n    }\n\n    export class Module {\n        gid: number;\n\n        constructor(\n            public id: number,\n            public outgoing: LinkSets = new LinkSets(),\n            public incoming: LinkSets = new LinkSets(),\n            public children: ModuleSet = new ModuleSet(),\n            public definition?: any) { }\n\n        getEdges(es: PowerEdge[]) {\n            this.outgoing.forAll((ms, edgetype) => {\n                ms.forAll(target => {\n                    es.push(new PowerEdge(this.id, target.id, edgetype));\n                });\n            });\n        }\n\n        isLeaf() {\n            return this.children.count() === 0;\n        }\n\n        isIsland() {\n            return this.outgoing.count() === 0 && this.incoming.count() === 0;\n        }\n\n        isPredefined(): boolean {\n            return typeof this.definition !== \"undefined\";\n        }\n    }\n\n    function intersection(m: any, n: any): any {\n        var i = {};\n        for (var v in m) if (v in n) i[v] = m[v];\n        return i;\n    }\n\n    export class ModuleSet {\n        table: any = {};\n        count() {\n            return Object.keys(this.table).length;\n        }\n        intersection(other: ModuleSet): ModuleSet {\n            var result = new ModuleSet();\n            result.table = intersection(this.table, other.table);\n            return result;\n        }\n        intersectionCount(other: ModuleSet): number {\n            return this.intersection(other).count();\n        }\n        contains(id: number): boolean {\n            return id in this.table;\n        }\n        add(m: Module): void {\n            this.table[m.id] = m;\n        }\n        remove(m: Module): void {\n            delete this.table[m.id];\n        }\n        forAll(f: (m: Module) => void) {\n            for (var mid in this.table) {\n                f(this.table[mid]);\n            }\n        }\n        modules(): Module[] {\n            var vs = [];\n            this.forAll(m => {\n                if (!m.isPredefined())\n                    vs.push(m);\n            });\n            return vs;\n        }\n    }\n\n    export class LinkSets {\n        sets: any = {};\n        n: number = 0;\n        count(): number {\n            return this.n;\n        }\n        contains(id: number) {\n            var result = false;\n            this.forAllModules(m => {\n                if (!result && m.id == id) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n        add(linktype: number, m: Module) {\n            var s: ModuleSet = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n            s.add(m);\n            ++this.n;\n        }\n        remove(linktype: number, m: Module) {\n            var ms = <ModuleSet>this.sets[linktype];\n            ms.remove(m);\n            if (ms.count() === 0) {\n                delete this.sets[linktype];\n            }\n            --this.n;\n        }\n        forAll(f: (ms: ModuleSet, linktype: number) => void) {\n            for (var linktype in this.sets) {\n                f(<ModuleSet>this.sets[linktype], Number(linktype));\n            }\n        }\n        forAllModules(f: (m: Module) => void) {\n            this.forAll((ms, lt) => ms.forAll(f));\n        }\n        intersection(other: LinkSets): LinkSets {\n            var result: LinkSets = new LinkSets();\n            this.forAll((ms, lt) => {\n                if (lt in other.sets) {\n                    var i = ms.intersection(other.sets[lt]),\n                        n = i.count();\n                    if (n > 0) {\n                        result.sets[lt] = i;\n                        result.n += n;\n                    }\n                }\n            });\n            return result;\n        }\n    }\n\n    function intersectionCount(m: any, n: any): number {\n        return Object.keys(intersection(m, n)).length\n    }\n\n    export function getGroups<Link>(nodes: any[], links: Link[], la: LinkTypeAccessor<Link>, rootGroup?: any[]): { groups: any[]; powerEdges: PowerEdge[] } {\n        var n = nodes.length,\n            c = new Configuration(n, links, la, rootGroup);\n        while (c.greedyMerge());\n        var powerEdges: PowerEdge[] = [];\n        var g = c.getGroupHierarchy(powerEdges);\n        powerEdges.forEach(function (e) {\n            var f = (end) => {\n                var g = e[end];\n                if (typeof g == \"number\") e[end] = nodes[g];\n            };\n            f(\"source\");\n            f(\"target\");\n        });\n        return { groups: g, powerEdges: powerEdges };\n    }\n","    export interface LinkAccessor<Link> {\n        getSourceIndex(l: Link): number;\n        getTargetIndex(l: Link): number;\n    }\n\n    export interface LinkLengthAccessor<Link> extends LinkAccessor<Link> {\n        setLength(l: Link, value: number): void;\n    }\n\n    // compute the size of the union of two sets a and b\n    function unionCount(a: any, b: any): number {\n        var u = {};\n        for (var i in a) u[i] = {};\n        for (var i in b) u[i] = {};\n        return Object.keys(u).length;\n    }\n\n    // compute the size of the intersection of two sets a and b\n    function intersectionCount(a: number[], b: number[]): number {\n        var n = 0;\n        for (var i in a) if (typeof b[i] !== 'undefined') ++n;\n        return n;\n    }\n\n    function getNeighbours<Link>(links: Link[], la: LinkAccessor<Link>): any {\n        var neighbours = {};\n        var addNeighbours = (u, v) => {\n            if (typeof neighbours[u] === 'undefined')\n                neighbours[u] = {};\n            neighbours[u][v] = {};\n        };\n        links.forEach(e => {\n            var u = la.getSourceIndex(e), v = la.getTargetIndex(e);\n            addNeighbours(u, v);\n            addNeighbours(v, u);\n        });\n        return neighbours;\n    }\n\n    // modify the lengths of the specified links by the result of function f weighted by w\n    function computeLinkLengths<Link>(links: Link[], w: number, f: (a: any, b: any) => number, la: LinkLengthAccessor<Link>) {\n        var neighbours = getNeighbours(links, la);\n        links.forEach(l => {\n            var a = neighbours[la.getSourceIndex(l)];\n            var b = neighbours[la.getTargetIndex(l)];\n            la.setLength(l, 1 + w * f(a, b));\n        });\n    }\n\n    /** modify the specified link lengths based on the symmetric difference of their neighbours\n     * @class symmetricDiffLinkLengths\n     */\n    export function symmetricDiffLinkLengths<Link>(links: Link[], la: LinkLengthAccessor<Link>, w: number = 1) {\n        computeLinkLengths(links, w, (a, b) => Math.sqrt(unionCount(a, b) - intersectionCount(a, b)), la);\n    }\n\n    /** modify the specified links lengths based on the jaccard difference between their neighbours\n     * @class jaccardLinkLengths\n     */\n    export function jaccardLinkLengths<Link>(links: Link[], la: LinkLengthAccessor<Link>, w: number = 1) {\n        computeLinkLengths(links, w, (a, b) =>\n            Math.min(Object.keys(a).length, Object.keys(b).length) < 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b)\n            , la);\n    }\n\n    export interface IConstraint {\n        left: number;\n        right: number;\n        gap: number;\n    }\n\n    export interface DirectedEdgeConstraints {\n        axis: string;\n        gap: number;\n    }\n\n    export interface LinkSepAccessor<Link> extends LinkAccessor<Link> {\n        getMinSeparation(l: Link): number;\n    }\n\n    /** generate separation constraints for all edges unless both their source and sink are in the same strongly connected component\n     * @class generateDirectedEdgeConstraints\n     */\n    export function generateDirectedEdgeConstraints<Link>(n: number, links: Link[], axis: string,\n        la: LinkSepAccessor<Link>): IConstraint[]\n    {\n        var components = stronglyConnectedComponents(n, links, la);\n        var nodes = {};\n        components.forEach((c,i) =>\n            c.forEach(v => nodes[v] = i)\n        );\n        var constraints: any[] = [];\n        links.forEach(l => {\n            var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l),\n                u = nodes[ui], v = nodes[vi];\n            if (u !== v) {\n                constraints.push({\n                    axis: axis,\n                    left: ui,\n                    right: vi,\n                    gap: la.getMinSeparation(l)\n                });\n            }\n        });\n        return constraints;\n    }\n\n    /**\n     * Tarjan's strongly connected components algorithm for directed graphs\n     * returns an array of arrays of node indicies in each of the strongly connected components.\n     * a vertex not in a SCC of two or more nodes is it's own SCC.\n     * adaptation of https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\n     */\n    export function stronglyConnectedComponents<Link>(numVertices: number, edges: Link[], la: LinkAccessor<Link>): number[][]{\n        var nodes = [];\n        var index = 0;\n        var stack = [];\n        var components = [];\n        function strongConnect(v) {\n            // Set the depth index for v to the smallest unused index\n            v.index = v.lowlink = index++;\n            stack.push(v);\n            v.onStack = true;\n\n            // Consider successors of v\n            for (var w of v.out) {\n                if (typeof w.index === 'undefined') {\n                    // Successor w has not yet been visited; recurse on it\n                    strongConnect(w);\n                    v.lowlink = Math.min(v.lowlink, w.lowlink);\n                } else if (w.onStack) {\n                    // Successor w is in stack S and hence in the current SCC\n                    v.lowlink = Math.min(v.lowlink, w.index);\n                }\n            }\n\n            // If v is a root node, pop the stack and generate an SCC\n            if (v.lowlink === v.index) {\n                // start a new strongly connected component\n                var component = [];\n                while (stack.length) {\n                    w = stack.pop();\n                    w.onStack = false;\n                    //add w to current strongly connected component\n                    component.push(w);\n                    if (w === v) break;\n                }\n                // output the current strongly connected component\n                components.push(component.map(v => v.id));\n            }\n        }\n        for (var i = 0; i < numVertices; i++) {\n            nodes.push({id: i, out: []});\n        }\n        for (var e of edges) {\n            let v = nodes[la.getSourceIndex(e)],\n                w = nodes[la.getTargetIndex(e)];\n            v.out.push(w);\n        }\n        for (var v of nodes) if (typeof v.index === 'undefined') strongConnect(v);\n        return components;\n    }\n","    /**\n     * Descent respects a collection of locks over nodes that should not move\n     * @class Locks\n     */\n    export class Locks {\n        locks: { [key:number]:number[]} = {};\n        /**\n         * add a lock on the node at index id\n         * @method add\n         * @param id index of node to be locked\n         * @param x required position for node\n         */\n        add(id: number, x: number[]) {\n/* DEBUG\n            if (isNaN(x[0]) || isNaN(x[1])) debugger;\nDEBUG */\n            this.locks[id] = x;\n        }\n        /**\n         * @method clear clear all locks\n         */\n        clear() {\n            this.locks = {};\n        }\n        /**\n         * @isEmpty\n         * @returns false if no locks exist\n         */\n        isEmpty(): boolean {\n            for (var l in this.locks) return false;\n            return true;\n        }\n        /**\n         * perform an operation on each lock\n         * @apply\n         */\n        apply(f: (id: number, x: number[]) => void) {\n            for (var l in this.locks) {\n                f(Number(l), this.locks[l]);\n            }\n        }\n    }\n\n    /**\n     * Uses a gradient descent approach to reduce a stress or p-stress goal function over a graph with specified ideal edge lengths or a square matrix of dissimilarities.\n     * The standard stress function over a graph nodes with position vectors x,y,z is (mathematica input):\n     *   stress[x_,y_,z_,D_,w_]:=Sum[w[[i,j]] (length[x[[i]],y[[i]],z[[i]],x[[j]],y[[j]],z[[j]]]-d[[i,j]])^2,{i,Length[x]-1},{j,i+1,Length[x]}]\n     * where: D is a square matrix of ideal separations between nodes, w is matrix of weights for those separations\n     *        length[x1_, y1_, z1_, x2_, y2_, z2_] = Sqrt[(x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2]\n     * below, we use wij = 1/(Dij^2)\n     *\n     * @class Descent\n     */\n    export class Descent {\n        public threshold: number = 0.0001;\n        /** Hessian Matrix\n         * @property H {number[][][]}\n         */\n        public H: number[][][];\n        /** gradient vector\n         * @property G {number[][]}\n         */\n        public g: number[][];\n        /** positions vector\n         * @property x {number[][]}\n         */\n        public x: number[][];\n        /**\n         * @property k {number} dimensionality\n         */\n        public k: number;\n        /**\n         * number of data-points / nodes / size of vectors/matrices\n         * @property n {number}\n         */\n        public n: number;\n\n        public locks: Locks;\n\n        private static zeroDistance: number = 1e-10;\n        private minD: number;\n\n        // pool of arrays of size n used internally, allocated in constructor\n        private Hd: number[][];\n        private a: number[][];\n        private b: number[][];\n        private c: number[][];\n        private d: number[][];\n        private e: number[][];\n        private ia: number[][];\n        private ib: number[][];\n        private xtmp: number[][];\n\n\n        // Parameters for grid snap stress.\n        // TODO: Make a pluggable \"StressTerm\" class instead of this\n        // mess.\n        public numGridSnapNodes: number = 0;\n        public snapGridSize: number = 100;\n        public snapStrength: number = 1000;\n        public scaleSnapByMaxH: boolean = false;\n\n        private random = new PseudoRandom();\n\n        public project: { (x0: number[], y0: number[], r: number[]): void }[] = null;\n\n        /**\n         * @method constructor\n         * @param x {number[][]} initial coordinates for nodes\n         * @param D {number[][]} matrix of desired distances between pairs of nodes\n         * @param G {number[][]} [default=null] if specified, G is a matrix of weights for goal terms between pairs of nodes.\n         * If G[i][j] > 1 and the separation between nodes i and j is greater than their ideal distance, then there is no contribution for this pair to the goal\n         * If G[i][j] <= 1 then it is used as a weighting on the contribution of the variance between ideal and actual separation between i and j to the goal function\n         */\n        constructor(x: number[][], public D: number[][], public G: number[][]= null) {\n            this.x = x;\n            this.k = x.length; // dimensionality\n            var n = this.n = x[0].length; // number of nodes\n            this.H = new Array(this.k);\n            this.g = new Array(this.k);\n            this.Hd = new Array(this.k);\n            this.a = new Array(this.k);\n            this.b = new Array(this.k);\n            this.c = new Array(this.k);\n            this.d = new Array(this.k);\n            this.e = new Array(this.k);\n            this.ia = new Array(this.k);\n            this.ib = new Array(this.k);\n            this.xtmp = new Array(this.k);\n            this.locks = new Locks();\n            this.minD = Number.MAX_VALUE;\n            var i = n, j;\n            while (i--) {\n                j = n;\n                while (--j > i) {\n                    var d = D[i][j];\n                    if (d > 0 && d < this.minD) {\n                        this.minD = d;\n                    }\n                }\n            }\n            if (this.minD === Number.MAX_VALUE) this.minD = 1;\n            i = this.k;\n            while (i--) {\n                this.g[i] = new Array(n);\n                this.H[i] = new Array(n);\n                j = n;\n                while (j--) {\n                    this.H[i][j] = new Array(n);\n                }\n                this.Hd[i] = new Array(n);\n                this.a[i] = new Array(n);\n                this.b[i] = new Array(n);\n                this.c[i] = new Array(n);\n                this.d[i] = new Array(n);\n                this.e[i] = new Array(n);\n                this.ia[i] = new Array(n);\n                this.ib[i] = new Array(n);\n                this.xtmp[i] = new Array(n);\n            }\n        }\n\n        public static createSquareMatrix(n: number, f: (i: number, j: number) => number): number[][] {\n            var M = new Array(n);\n            for (var i = 0; i < n; ++i) {\n                M[i] = new Array(n);\n                for (var j = 0; j < n; ++j) {\n                    M[i][j] = f(i, j);\n                }\n            }\n            return M;\n        }\n\n        private offsetDir(): number[] {\n            var u = new Array(this.k);\n            var l = 0;\n            for (var i = 0; i < this.k; ++i) {\n                var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\n                l += x * x;\n            }\n            l = Math.sqrt(l);\n            return u.map(x=> x *= this.minD / l);\n        }\n\n        // compute first and second derivative information storing results in this.g and this.H\n        public computeDerivatives(x: number[][]) {\n            const n = this.n;\n            if (n < 1) return;\n            let i: number;\n/* DEBUG\n            for (var u: number = 0; u < n; ++u)\n                for (i = 0; i < this.k; ++i)\n                    if (isNaN(x[i][u])) debugger;\nDEBUG */\n\n            let d = new Array<number>(this.k); // distance vector\n            let d2 = new Array<number>(this.k); // distance vector squared\n            let Huu = new Array<number>(this.k); // Hessian diagonal\n            let maxH = 0; // max Hessian matrix entry\n\n            // across all nodes u\n            for (let u = 0; u < n; ++u) {\n                // zero gradient and hessian diagonals\n                for (i = 0; i < this.k; ++i) Huu[i] = this.g[i][u] = 0;\n\n                // across all nodes v\n                for (let v = 0; v < n; ++v) {\n                    if (u === v) continue;\n\n                    // The following loop computes distance vector and\n                    // randomly displaces nodes that are at identical positions\n                    let maxDisplaces = n; // avoid infinite loop in the case of numerical issues, such as huge values\n                    let distanceSquared = 0;\n                    while (maxDisplaces--) {\n                        distanceSquared = 0;\n                        for (i = 0; i < this.k; ++i) {\n                            const dx = d[i] = x[i][u] - x[i][v];\n                            distanceSquared += d2[i] = dx * dx;\n                        }\n                        if (distanceSquared > 1e-9) break;\n                        const rd = this.offsetDir();\n                        for (i = 0; i < this.k; ++i) x[i][v] += rd[i];\n                    }\n                    const distance = Math.sqrt(distanceSquared);\n                    const idealDistance = this.D[u][v];\n                    // weights are passed via G matrix.\n                    // weight > 1 means not immediately connected\n                    // small weights (<<1) are used for group dummy nodes\n                    let weight = this.G != null ? this.G[u][v] : 1;\n\n                    // ignore long range attractions for nodes not immediately connected (P-stress)\n                    if (weight > 1 && distance > idealDistance || !isFinite(idealDistance)) {\n                        for (i = 0; i < this.k; ++i) this.H[i][u][v] = 0;\n                        continue;\n                    }\n                    // weight > 1 was just an indicator - this is an arcane interface,\n                    // but we are trying to be economical storing and passing node pair info\n                    if (weight > 1) {\n                        weight = 1;\n                    }\n                    const idealDistSquared = idealDistance * idealDistance,\n                        gs = 2 * weight * (distance - idealDistance) / (idealDistSquared * distance),\n                        distanceCubed = distanceSquared * distance,\n                        hs = 2 * -weight / (idealDistSquared * distanceCubed);\n                    if (!isFinite(gs))\n                        console.log(gs);\n                    for (i = 0; i < this.k; ++i) {\n                        this.g[i][u] += d[i] * gs;\n                        Huu[i] -= this.H[i][u][v] = hs * (2 * distanceCubed + idealDistance * (d2[i] - distanceSquared));\n                    }\n                }\n                for (i = 0; i < this.k; ++i) maxH = Math.max(maxH, this.H[i][u][u] = Huu[i]);\n            }\n            // Grid snap forces\n            var r = this.snapGridSize/2;\n            var g = this.snapGridSize;\n            var w = this.snapStrength;\n            var k = w / (r * r);\n            var numNodes = this.numGridSnapNodes;\n            //var numNodes = n;\n            for (var u: number = 0; u < numNodes; ++u) {\n                for (i = 0; i < this.k; ++i) {\n                    var xiu = this.x[i][u];\n                    var m = xiu / g;\n                    var f = m % 1;\n                    var q = m - f;\n                    var a = Math.abs(f);\n                    var dx = (a <= 0.5) ? xiu - q * g :\n                        (xiu > 0) ? xiu - (q + 1) * g : xiu - (q - 1) * g;\n                    if (-r < dx && dx <= r) {\n                        if (this.scaleSnapByMaxH) {\n                            this.g[i][u] += maxH * k * dx;\n                            this.H[i][u][u] += maxH * k;\n                        } else {\n                            this.g[i][u] += k * dx;\n                            this.H[i][u][u] += k;\n                        }\n                    }\n                }\n            }\n            if (!this.locks.isEmpty()) {\n                this.locks.apply((u, p) => {\n                    for (i = 0; i < this.k; ++i) {\n                        this.H[i][u][u] += maxH;\n                        this.g[i][u] -= maxH * (p[i] - x[i][u]);\n                    }\n                });\n            }\n/* DEBUG\n            for (var u: number = 0; u < n; ++u)\n                for (i = 0; i < this.k; ++i) {\n                    if (isNaN(this.g[i][u])) debugger;\n                    for (var v: number = 0; v < n; ++v)\n                        if (isNaN(this.H[i][u][v])) debugger;\n                }\nDEBUG */\n        }\n\n        private static dotProd(a: number[], b: number[]): number {\n            var x = 0, i = a.length;\n            while (i--) x += a[i] * b[i];\n            return x;\n        }\n\n        // result r = matrix m * vector v\n        private static rightMultiply(m: number[][], v: number[], r: number[]) {\n            var i = m.length;\n            while (i--) r[i] = Descent.dotProd(m[i], v);\n        }\n\n        // computes the optimal step size to take in direction d using the\n        // derivative information in this.g and this.H\n        // returns the scalar multiplier to apply to d to get the optimal step\n        public computeStepSize(d: number[][]): number {\n            var numerator = 0, denominator = 0;\n            for (var i = 0; i < this.k; ++i) {\n                numerator += Descent.dotProd(this.g[i], d[i]);\n                Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);\n                denominator += Descent.dotProd(d[i], this.Hd[i]);\n            }\n            if (denominator === 0 || !isFinite(denominator)) return 0;\n            return 1 * numerator / denominator;\n        }\n\n        public reduceStress(): number {\n            this.computeDerivatives(this.x);\n            var alpha = this.computeStepSize(this.g);\n            for (var i = 0; i < this.k; ++i) {\n                this.takeDescentStep(this.x[i], this.g[i], alpha);\n            }\n            return this.computeStress();\n        }\n\n        private static copy(a: number[][], b: number[][]): void {\n            var m = a.length, n = b[0].length;\n            for (var i = 0; i < m; ++i) {\n                for (var j = 0; j < n; ++j) {\n                    b[i][j] = a[i][j];\n                }\n            }\n        }\n\n        // takes a step of stepSize * d from x0, and then project against any constraints.\n        // result is returned in r.\n        // x0: starting positions\n        // r: result positions will be returned here\n        // d: unconstrained descent vector\n        // stepSize: amount to step along d\n        private stepAndProject(x0: number[][], r: number[][], d: number[][], stepSize: number): void {\n            Descent.copy(x0, r);\n            this.takeDescentStep(r[0], d[0], stepSize);\n            if (this.project) this.project[0](x0[0], x0[1], r[0]);\n            this.takeDescentStep(r[1], d[1], stepSize);\n            if (this.project) this.project[1](r[0], x0[1], r[1]);\n\n            // todo: allow projection against constraints in higher dimensions\n            for (var i = 2; i < this.k; i++)\n                this.takeDescentStep(r[i], d[i], stepSize);\n\n            // the following makes locks extra sticky... but hides the result of the projection from the consumer\n            //if (!this.locks.isEmpty()) {\n            //    this.locks.apply((u, p) => {\n            //        for (var i = 0; i < this.k; i++) {\n            //            r[i][u] = p[i];\n            //        }\n            //    });\n            //}\n        }\n\n        private static mApply(m: number, n: number, f: (i: number, j: number) => any) {\n            var i = m; while (i-- > 0) {\n                var j = n; while (j-- > 0) f(i, j);\n            }\n        }\n        private matrixApply(f: (i: number, j: number) => any) {\n            Descent.mApply(this.k, this.n, f);\n        }\n\n        private computeNextPosition(x0: number[][], r: number[][]): void {\n            this.computeDerivatives(x0);\n            var alpha = this.computeStepSize(this.g);\n            this.stepAndProject(x0, r, this.g, alpha);\n/* DEBUG\n            for (var u: number = 0; u < this.n; ++u)\n                for (var i = 0; i < this.k; ++i)\n                    if (isNaN(r[i][u])) debugger;\nDEBUG */\n            if (this.project) {\n                this.matrixApply((i, j) => this.e[i][j] = x0[i][j] - r[i][j]);\n                var beta = this.computeStepSize(this.e);\n                beta = Math.max(0.2, Math.min(beta, 1));\n                this.stepAndProject(x0, r, this.e, beta);\n            }\n        }\n\n        public run(iterations: number): number {\n            var stress = Number.MAX_VALUE, converged = false;\n            while (!converged && iterations-- > 0) {\n                var s = this.rungeKutta();\n                converged = Math.abs(stress / s - 1) < this.threshold;\n                stress = s;\n            }\n            return stress;\n        }\n\n        public rungeKutta(): number {\n            this.computeNextPosition(this.x, this.a);\n            Descent.mid(this.x, this.a, this.ia);\n            this.computeNextPosition(this.ia, this.b);\n            Descent.mid(this.x, this.b, this.ib);\n            this.computeNextPosition(this.ib, this.c);\n            this.computeNextPosition(this.c, this.d);\n            var disp = 0;\n            this.matrixApply((i, j) => {\n                var x = (this.a[i][j] + 2.0 * this.b[i][j] + 2.0 * this.c[i][j] + this.d[i][j]) / 6.0,\n                    d = this.x[i][j] - x;\n                disp += d * d;\n                this.x[i][j] = x;\n            });\n            return disp;\n        }\n\n        private static mid(a: number[][], b: number[][], m: number[][]): void {\n            Descent.mApply(a.length, a[0].length, (i, j) =>\n                m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0);\n        }\n\n        public takeDescentStep(x: number[], d: number[], stepSize: number): void {\n            for (var i = 0; i < this.n; ++i) {\n                x[i] = x[i] - stepSize * d[i];\n            }\n        }\n\n        public computeStress(): number {\n            var stress = 0;\n            for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {\n                for (var v = u + 1, n = this.n; v < n; ++v) {\n                    var l = 0;\n                    for (var i = 0; i < this.k; ++i) {\n                        var dx = this.x[i][u] - this.x[i][v];\n                        l += dx * dx;\n                    }\n                    l = Math.sqrt(l);\n                    var d = this.D[u][v];\n                    if (!isFinite(d)) continue;\n                    var rl = d - l;\n                    var d2 = d * d;\n                    stress += rl * rl / d2;\n                }\n            }\n            return stress;\n        }\n    }\n\n    // Linear congruential pseudo random number generator\n    export class PseudoRandom {\n        private a: number = 214013;\n        private c: number = 2531011;\n        private m: number = 2147483648;\n        private range: number = 32767;\n\n        constructor(public seed: number = 1) { }\n\n        // random real between 0 and 1\n        getNext(): number {\n            this.seed = (this.seed * this.a + this.c) % this.m;\n            return (this.seed >> 16) / this.range;\n        }\n\n        // random real between min and max\n        getNextBetween(min: number, max: number) {\n            return min + this.getNext() * (max - min);\n        }\n    }\n","    export class PositionStats {\n        AB: number = 0;\n        AD: number = 0;\n        A2: number = 0;\n\n        constructor(public scale: number) {}\n\n        addVariable(v: Variable): void {\n            var ai = this.scale / v.scale;\n            var bi = v.offset / v.scale;\n            var wi = v.weight;\n            this.AB += wi * ai * bi;\n            this.AD += wi * ai * v.desiredPosition;\n            this.A2 += wi * ai * ai;\n        }\n\n        getPosn(): number {\n            return (this.AD - this.AB) / this.A2;\n        }\n    }\n\n    export class Constraint {\n        lm: number;\n        active: boolean = false;\n        unsatisfiable: boolean = false;\n\n        constructor(public left: Variable, public right: Variable, public gap: number, public equality: boolean = false) {\n            this.left = left;\n            this.right = right;\n            this.gap = gap;\n            this.equality = equality;\n        }\n\n        slack(): number {\n            return this.unsatisfiable ? Number.MAX_VALUE\n                : this.right.scale * this.right.position() - this.gap\n                - this.left.scale * this.left.position();\n        }\n    }\n\n    export class Variable {\n        offset: number = 0;\n        block: Block;\n        cIn: Constraint[];\n        cOut: Constraint[];\n\n        constructor(public desiredPosition: number, public weight: number = 1, public scale: number = 1) {}\n\n        dfdv(): number {\n            return 2.0 * this.weight * (this.position() - this.desiredPosition);\n        }\n\n        position(): number {\n            return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\n        }\n\n        // visit neighbours by active constraints within the same block\n        visitNeighbours(prev: Variable, f: (c: Constraint, next: Variable) => void ): void {\n            var ff = (c, next) => c.active && prev !== next && f(c, next);\n            this.cOut.forEach(c=> ff(c, c.right));\n            this.cIn.forEach(c=> ff(c, c.left));\n        }\n    }\n\n    export class Block {\n        vars: Variable[] = [];\n        posn: number;\n        ps: PositionStats;\n        blockInd: number;\n\n        constructor(v: Variable) {\n            v.offset = 0;\n            this.ps = new PositionStats(v.scale);\n            this.addVariable(v);\n        }\n\n        private addVariable(v: Variable): void {\n            v.block = this;\n            this.vars.push(v);\n            this.ps.addVariable(v);\n            this.posn = this.ps.getPosn();\n        }\n\n        // move the block where it needs to be to minimize cost\n        updateWeightedPosition(): void {\n            this.ps.AB = this.ps.AD = this.ps.A2 = 0;\n            for (var i = 0, n = this.vars.length; i < n; ++i)\n                this.ps.addVariable(this.vars[i]);\n            this.posn = this.ps.getPosn();\n        }\n\n        private compute_lm(v: Variable, u: Variable, postAction: (c: Constraint)=>void): number {\n            var dfdv = v.dfdv();\n            v.visitNeighbours(u, (c, next) => {\n                var _dfdv = this.compute_lm(next, v, postAction);\n                if (next === c.right) {\n                    dfdv += _dfdv * c.left.scale;\n                    c.lm = _dfdv;\n                } else {\n                    dfdv += _dfdv * c.right.scale;\n                    c.lm = -_dfdv;\n                }\n                postAction(c);\n            });\n            return dfdv / v.scale;\n        }\n\n        private populateSplitBlock(v: Variable, prev: Variable): void {\n            v.visitNeighbours(prev, (c, next) => {\n                next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\n                this.addVariable(next);\n                this.populateSplitBlock(next, v);\n            });\n        }\n\n        // traverse the active constraint tree applying visit to each active constraint\n        traverse(visit: (c: Constraint) => any, acc: any[], v: Variable = this.vars[0], prev: Variable=null) {\n            v.visitNeighbours(prev, (c, next) => {\n                acc.push(visit(c));\n                this.traverse(visit, acc, next, v);\n            });\n        }\n\n        // calculate lagrangian multipliers on constraints and\n        // find the active constraint in this block with the smallest lagrangian.\n        // if the lagrangian is negative, then the constraint is a split candidate.\n        findMinLM(): Constraint {\n            var m: Constraint = null;\n            this.compute_lm(this.vars[0], null, c=> {\n                if (!c.equality && (m === null || c.lm < m.lm)) m = c;\n            });\n            return m;\n        }\n\n        private findMinLMBetween(lv: Variable, rv: Variable): Constraint {\n            this.compute_lm(lv, null, () => {});\n            var m = null;\n            this.findPath(lv, null, rv, (c, next)=> {\n                if (!c.equality && c.right === next && (m === null || c.lm < m.lm)) m = c;\n            });\n            return m;\n        }\n\n        private findPath(v: Variable, prev: Variable, to: Variable, visit: (c: Constraint, next:Variable)=>void): boolean {\n            var endFound = false;\n            v.visitNeighbours(prev, (c, next) => {\n                if (!endFound && (next === to || this.findPath(next, v, to, visit)))\n                {\n                    endFound = true;\n                    visit(c, next);\n                }\n            });\n            return endFound;\n        }\n\n        // Search active constraint tree from u to see if there is a directed path to v.\n        // Returns true if path is found.\n        isActiveDirectedPathBetween(u: Variable, v: Variable) : boolean {\n            if (u === v) return true;\n            var i = u.cOut.length;\n            while(i--) {\n                var c = u.cOut[i];\n                if (c.active && this.isActiveDirectedPathBetween(c.right, v))\n                    return true;\n            }\n            return false;\n        }\n\n        // split the block into two by deactivating the specified constraint\n        static split(c: Constraint): Block[]{\n/* DEBUG\n            console.log(\"split on \" + c);\n            console.assert(c.active, \"attempt to split on inactive constraint\");\nDEBUG */\n            c.active = false;\n            return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\n        }\n\n        private static createSplitBlock(startVar: Variable): Block {\n            var b = new Block(startVar);\n            b.populateSplitBlock(startVar, null);\n            return b;\n        }\n\n        // find a split point somewhere between the specified variables\n        splitBetween(vl: Variable, vr: Variable): { constraint: Constraint; lb: Block; rb: Block } {\n/* DEBUG\n            console.assert(vl.block === this);\n            console.assert(vr.block === this);\nDEBUG */\n            var c = this.findMinLMBetween(vl, vr);\n            if (c !== null) {\n                var bs = Block.split(c);\n                return { constraint: c, lb: bs[0], rb: bs[1] };\n            }\n            // couldn't find a split point - for example the active path is all equality constraints\n            return null;\n        }\n\n        mergeAcross(b: Block, c: Constraint, dist: number): void {\n            c.active = true;\n            for (var i = 0, n = b.vars.length; i < n; ++i) {\n                var v = b.vars[i];\n                v.offset += dist;\n                this.addVariable(v);\n            }\n            this.posn = this.ps.getPosn();\n        }\n\n        cost(): number {\n            var sum = 0, i = this.vars.length;\n            while (i--) {\n                var v = this.vars[i],\n                    d = v.position() - v.desiredPosition;\n                sum += d * d * v.weight;\n            }\n            return sum;\n        }\n\n/* DEBUG\n        toString(): string {\n            var cs = [];\n            this.traverse(c=> c.toString() + \"\\n\", cs)\n            return \"b\"+this.blockInd + \"@\" + this.posn + \": vars=\" + this.vars.map(v=> v.toString()+\":\"+v.offset) + \";\\n cons=\\n\" + cs;\n        }\nDEBUG */\n    }\n\n    export class Blocks {\n        private list: Block[];\n\n        constructor(public vs: Variable[]) {\n            var n = vs.length;\n            this.list = new Array(n);\n            while (n--) {\n                var b = new Block(vs[n]);\n                this.list[n] = b;\n                b.blockInd = n;\n            }\n        }\n\n        cost(): number {\n            var sum = 0, i = this.list.length;\n            while (i--) sum += this.list[i].cost();\n            return sum;\n        }\n\n        insert(b: Block) {\n/* DEBUG\n            console.assert(!this.contains(b), \"blocks error: tried to reinsert block \" + b.blockInd)\nDEBUG */\n            b.blockInd = this.list.length;\n            this.list.push(b);\n/* DEBUG\n            console.log(\"insert block: \" + b.blockInd);\n            this.contains(b);\nDEBUG */\n        }\n\n        remove(b: Block) {\n/* DEBUG\n            console.log(\"remove block: \" + b.blockInd);\n            console.assert(this.contains(b));\nDEBUG */\n            var last = this.list.length - 1;\n            var swapBlock = this.list[last];\n            this.list.length = last;\n            if (b !== swapBlock) {\n                this.list[b.blockInd] = swapBlock;\n                swapBlock.blockInd = b.blockInd;\n/* DEBUG\n                console.assert(this.contains(swapBlock));\nDEBUG */\n            }\n        }\n\n        // merge the blocks on either side of the specified constraint, by copying the smaller block into the larger\n        // and deleting the smaller.\n        merge(c: Constraint): void {\n            var l = c.left.block, r = c.right.block;\n/* DEBUG\n            console.assert(l!==r, \"attempt to merge within the same block\");\nDEBUG */\n            var dist = c.right.offset - c.left.offset - c.gap;\n            if (l.vars.length < r.vars.length) {\n                r.mergeAcross(l, c, dist);\n                this.remove(l);\n            } else {\n                l.mergeAcross(r, c, -dist);\n                this.remove(r);\n            }\n/* DEBUG\n            console.assert(Math.abs(c.slack()) < 1e-6, \"Error: Constraint should be at equality after merge!\");\n            console.log(\"merged on \" + c);\nDEBUG */\n        }\n\n        forEach(f: (b: Block, i: number) => void ) {\n            this.list.forEach(f);\n        }\n\n        // useful, for example, after variable desired positions change.\n        updateBlockPositions(): void {\n            this.list.forEach(b=> b.updateWeightedPosition());\n        }\n\n        // split each block across its constraint with the minimum lagrangian\n        split(inactive: Constraint[]): void {\n            this.updateBlockPositions();\n            this.list.forEach(b=> {\n                var v = b.findMinLM();\n                if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\n                    b = v.left.block;\n                    Block.split(v).forEach(nb=>this.insert(nb));\n                    this.remove(b);\n                    inactive.push(v);\n/* DEBUG\n                    console.assert(this.contains(v.left.block));\n                    console.assert(this.contains(v.right.block));\nDEBUG */\n                }\n            });\n        }\n\n/* DEBUG\n        // checks b is in the block, and does a sanity check over list index integrity\n        contains(b: Block): boolean {\n            var result = false;\n            this.list.forEach((bb, i) => {\n                if (bb.blockInd !== i) {\n                    console.error(\"blocks error, blockInd \" + b.blockInd + \" found at \" + i);\n                    return false;\n                }\n                result = result || b === bb;\n            });\n            return result;\n        }\n\n        toString(): string {\n            return this.list.toString();\n        }\nDEBUG */\n    }\n\n    export class Solver {\n        bs: Blocks;\n        inactive: Constraint[];\n\n        static LAGRANGIAN_TOLERANCE = -1e-4;\n        static ZERO_UPPERBOUND = -1e-10;\n\n        constructor(public vs: Variable[], public cs: Constraint[]) {\n            this.vs = vs;\n            vs.forEach(v => {\n                v.cIn = [], v.cOut = [];\n/* DEBUG\n                v.toString = () => \"v\" + vs.indexOf(v);\nDEBUG */\n            });\n            this.cs = cs;\n            cs.forEach(c => {\n                c.left.cOut.push(c);\n                c.right.cIn.push(c);\n/* DEBUG\n                c.toString = () => c.left + \"+\" + c.gap + \"<=\" + c.right + \" slack=\" + c.slack() + \" active=\" + c.active;\nDEBUG */\n            });\n            this.inactive = cs.map(c=> { c.active = false; return c; });\n            this.bs = null;\n        }\n\n        cost(): number {\n            return this.bs.cost();\n        }\n\n        // set starting positions without changing desired positions.\n        // Note: it throws away any previous block structure.\n        setStartingPositions(ps: number[]): void {\n            this.inactive = this.cs.map(c=> { c.active = false; return c; });\n            this.bs = new Blocks(this.vs);\n            this.bs.forEach((b, i) => b.posn = ps[i]);\n        }\n\n        setDesiredPositions(ps: number[]): void {\n            this.vs.forEach((v, i) => v.desiredPosition = ps[i]);\n        }\n\n/* DEBUG\n        private getId(v: Variable): number {\n            return this.vs.indexOf(v);\n        }\n\n        // sanity check of the index integrity of the inactive list\n        checkInactive(): void {\n            var inactiveCount = 0;\n            this.cs.forEach(c=> {\n                var i = this.inactive.indexOf(c);\n                console.assert(!c.active && i >= 0 || c.active && i < 0, \"constraint should be in the inactive list if it is not active: \" + c);\n                if (i >= 0) {\n                    inactiveCount++;\n                } else {\n                    console.assert(c.active, \"inactive constraint not found in inactive list: \" + c);\n                }\n            });\n            console.assert(inactiveCount === this.inactive.length, inactiveCount + \" inactive constraints found, \" + this.inactive.length + \"in inactive list\");\n        }\n        // after every call to satisfy the following should check should pass\n        checkSatisfied(): void {\n            this.cs.forEach(c=>console.assert(c.slack() >= vpsc.Solver.ZERO_UPPERBOUND, \"Error: Unsatisfied constraint! \"+c));\n        }\nDEBUG */\n\n        private mostViolated(): Constraint {\n            var minSlack = Number.MAX_VALUE,\n                v: Constraint = null,\n                l = this.inactive,\n                n = l.length,\n                deletePoint = n;\n            for (var i = 0; i < n; ++i) {\n                var c = l[i];\n                if (c.unsatisfiable) continue;\n                var slack = c.slack();\n                if (c.equality || slack < minSlack) {\n                    minSlack = slack;\n                    v = c;\n                    deletePoint = i;\n                    if (c.equality) break;\n                }\n            }\n            if (deletePoint !== n &&\n                (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality))\n            {\n                l[deletePoint] = l[n - 1];\n                l.length = n - 1;\n            }\n            return v;\n        }\n\n        // satisfy constraints by building block structure over violated constraints\n        // and moving the blocks to their desired positions\n        satisfy(): void {\n            if (this.bs == null) {\n                this.bs = new Blocks(this.vs);\n            }\n/* DEBUG\n            console.log(\"satisfy: \" + this.bs);\nDEBUG */\n            this.bs.split(this.inactive);\n            var v: Constraint = null;\n            while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\n                var lb = v.left.block, rb = v.right.block;\n/* DEBUG\n                console.log(\"most violated is: \" + v);\n                this.bs.contains(lb);\n                this.bs.contains(rb);\nDEBUG */\n                if (lb !== rb) {\n                    this.bs.merge(v);\n                } else {\n                    if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\n                        // cycle found!\n                        v.unsatisfiable = true;\n                        continue;\n                    }\n                    // constraint is within block, need to split first\n                    var split = lb.splitBetween(v.left, v.right);\n                    if (split !== null) {\n                        this.bs.insert(split.lb);\n                        this.bs.insert(split.rb);\n                        this.bs.remove(lb);\n                        this.inactive.push(split.constraint);\n                    } else {\n/* DEBUG\n                        console.log(\"unsatisfiable constraint found\");\nDEBUG */\n                        v.unsatisfiable = true;\n                        continue;\n                    }\n                    if (v.slack() >= 0) {\n/* DEBUG\n                        console.log(\"violated constraint indirectly satisfied: \" + v);\nDEBUG */\n                        // v was satisfied by the above split!\n                        this.inactive.push(v);\n                    } else {\n/* DEBUG\n                        console.log(\"merge after split:\");\nDEBUG */\n                        this.bs.merge(v);\n                    }\n                }\n/* DEBUG\n                this.bs.contains(v.left.block);\n                this.bs.contains(v.right.block);\n                this.checkInactive();\nDEBUG */\n            }\n/* DEBUG\n            this.checkSatisfied();\nDEBUG */\n        }\n\n        // repeatedly build and split block structure until we converge to an optimal solution\n        solve(): number {\n            this.satisfy();\n            var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\n            while (Math.abs(lastcost - cost) > 0.0001) {\n                this.satisfy();\n                lastcost = cost;\n                cost = this.bs.cost();\n            }\n            return cost;\n        }\n    }\n    /**\n      * Remove overlap between spans while keeping their centers as close as possible to the specified desiredCenters.\n      * Lower and upper bounds will be respected if the spans physically fit between them\n      * (otherwise they'll be moved and their new position returned).\n      * If no upper/lower bound is specified then the bounds of the moved spans will be returned.\n      * returns a new center for each span.\n      */\n    export function removeOverlapInOneDimension(spans: { size: number, desiredCenter: number }[], lowerBound?: number, upperBound?: number)\n        : { newCenters: number[], lowerBound: number, upperBound: number }\n    {\n        const vs: Variable[] = spans.map(s => new Variable(s.desiredCenter));\n        const cs: Constraint[] = [];\n        const n = spans.length;\n        for (var i = 0; i < n - 1; i++) {\n            const left = spans[i], right = spans[i + 1];\n            cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\n        }\n        const leftMost = vs[0],\n            rightMost = vs[n - 1],\n            leftMostSize = spans[0].size / 2,\n            rightMostSize = spans[n - 1].size / 2;\n        let vLower: Variable = null, vUpper: Variable = null;\n        if (lowerBound) {\n            vLower = new Variable(lowerBound, leftMost.weight * 1000);\n            vs.push(vLower);\n            cs.push(new Constraint(vLower, leftMost, leftMostSize));\n        }\n        if (upperBound) {\n            vUpper = new Variable(upperBound, rightMost.weight * 1000);\n            vs.push(vUpper);\n            cs.push(new Constraint(rightMost, vUpper, rightMostSize));\n        }\n        var solver = new Solver(vs, cs);\n        solver.solve();\n        return {\n            newCenters: vs.slice(0, spans.length).map(v => v.position()),\n            lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\n            upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\n        };\n    }\n","    //Based on js_es:\n    //\n    //https://github.com/vadimg/js_bintrees\n    //\n    //Copyright (C) 2011 by Vadim Graboys\n    //\n    //Permission is hereby granted, free of charge, to any person obtaining a copy\n    //of this software and associated documentation files (the \"Software\"), to deal\n    //in the Software without restriction, including without limitation the rights\n    //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    //copies of the Software, and to permit persons to whom the Software is\n    //furnished to do so, subject to the following conditions:\n    //\n    //The above copyright notice and this permission notice shall be included in\n    //all copies or substantial portions of the Software.\n    //\n    //THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    //THE SOFTWARE.\n    export class TreeBase {\n        _root;\n        size;\n        _comparator;\n        // removes all nodes from the tree\n        clear() {\n            this._root = null;\n            this.size = 0;\n        };\n\n        // returns node data if found, null otherwise\n        find(data) {\n            var res = this._root;\n\n            while (res !== null) {\n                var c = this._comparator(data, res.data);\n                if (c === 0) {\n                    return res.data;\n                }\n                else {\n                    res = res.get_child(c > 0);\n                }\n            }\n\n            return null;\n        };\n\n        // returns iterator to node if found, null otherwise\n        findIter = function (data) {\n            var res = this._root;\n            var iter = this.iterator();\n\n            while (res !== null) {\n                var c = this._comparator(data, res.data);\n                if (c === 0) {\n                    iter._cursor = res;\n                    return iter;\n                }\n                else {\n                    iter._ancestors.push(res);\n                    res = res.get_child(c > 0);\n                }\n            }\n\n            return null;\n        };\n\n        // Returns an interator to the tree node immediately before (or at) the element\n        lowerBound(data) {\n            return this._bound(data, this._comparator);\n        };\n\n        // Returns an interator to the tree node immediately after (or at) the element\n        upperBound(data) {\n            var cmp = this._comparator;\n\n            function reverse_cmp(a, b) {\n                return cmp(b, a);\n            }\n\n            return this._bound(data, reverse_cmp);\n        };\n\n        // returns null if tree is empty\n        min() {\n            var res = this._root;\n            if (res === null) {\n                return null;\n            }\n\n            while (res.left !== null) {\n                res = res.left;\n            }\n\n            return res.data;\n        };\n\n        // returns null if tree is empty\n        max() {\n            var res = this._root;\n            if (res === null) {\n                return null;\n            }\n\n            while (res.right !== null) {\n                res = res.right;\n            }\n\n            return res.data;\n        };\n\n        // returns a null iterator\n        // call next() or prev() to point to an element\n        iterator(): Iterator {\n            return new Iterator(this);\n        };\n\n        // calls cb on each node's data, in order\n        each(cb) {\n            var it = this.iterator(), data;\n            while ((data = it.next()) !== null) {\n                cb(data);\n            }\n        };\n\n        // calls cb on each node's data, in reverse order\n        reach(cb) {\n            var it = this.iterator(), data;\n            while ((data = it.prev()) !== null) {\n                cb(data);\n            }\n        };\n\n        // used for lowerBound and upperBound\n        _bound(data, cmp) {\n            var cur = this._root;\n            var iter = this.iterator();\n\n            while (cur !== null) {\n                var c = this._comparator(data, cur.data);\n                if (c === 0) {\n                    iter._cursor = cur;\n                    return iter;\n                }\n                iter._ancestors.push(cur);\n                cur = cur.get_child(c > 0);\n            }\n\n            for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n                cur = iter._ancestors[i];\n                if (cmp(data, cur.data) > 0) {\n                    iter._cursor = cur;\n                    iter._ancestors.length = i;\n                    return iter;\n                }\n            }\n\n            iter._ancestors.length = 0;\n            return iter;\n        };\n    }\n    export class Iterator {\n        _tree;\n        _ancestors;\n        _cursor;\n        constructor(tree) {\n            this._tree = tree;\n            this._ancestors = [];\n            this._cursor = null;\n        }\n\n        data() {\n            return this._cursor !== null ? this._cursor.data : null;\n        };\n\n        // if null-iterator, returns first node\n        // otherwise, returns next node\n        next() {\n            if (this._cursor === null) {\n                var root = this._tree._root;\n                if (root !== null) {\n                    this._minNode(root);\n                }\n            }\n            else {\n                if (this._cursor.right === null) {\n                    // no greater node in subtree, go up to parent\n                    // if coming from a right child, continue up the stack\n                    var save;\n                    do {\n                        save = this._cursor;\n                        if (this._ancestors.length) {\n                            this._cursor = this._ancestors.pop();\n                        }\n                        else {\n                            this._cursor = null;\n                            break;\n                        }\n                    } while (this._cursor.right === save);\n                }\n                else {\n                    // get the next node from the subtree\n                    this._ancestors.push(this._cursor);\n                    this._minNode(this._cursor.right);\n                }\n            }\n            return this._cursor !== null ? this._cursor.data : null;\n        };\n\n        // if null-iterator, returns last node\n        // otherwise, returns previous node\n        prev() {\n            if (this._cursor === null) {\n                var root = this._tree._root;\n                if (root !== null) {\n                    this._maxNode(root);\n                }\n            }\n            else {\n                if (this._cursor.left === null) {\n                    var save;\n                    do {\n                        save = this._cursor;\n                        if (this._ancestors.length) {\n                            this._cursor = this._ancestors.pop();\n                        }\n                        else {\n                            this._cursor = null;\n                            break;\n                        }\n                    } while (this._cursor.left === save);\n                }\n                else {\n                    this._ancestors.push(this._cursor);\n                    this._maxNode(this._cursor.left);\n                }\n            }\n            return this._cursor !== null ? this._cursor.data : null;\n        };\n\n        _minNode(start) {\n            while (start.left !== null) {\n                this._ancestors.push(start);\n                start = start.left;\n            }\n            this._cursor = start;\n        };\n\n        _maxNode(start) {\n            while (start.right !== null) {\n                this._ancestors.push(start);\n                start = start.right;\n            }\n            this._cursor = start;\n        };\n    }\n\n    class Node {\n        data;\n        left;\n        right;\n        red;\n        constructor(data) {\n            this.data = data;\n            this.left = null;\n            this.right = null;\n            this.red = true;\n        }\n\n        get_child(dir) {\n            return dir ? this.right : this.left;\n        };\n\n        set_child(dir, val) {\n            if (dir) {\n                this.right = val;\n            }\n            else {\n                this.left = val;\n            }\n        };\n    }\n\n    export class RBTree<T> extends TreeBase {\n\n        _root;\n        _comparator;\n        size;\n        constructor(comparator: (a: T, b: T) => number) {\n            super();\n            this._root = null;\n            this._comparator = comparator;\n            this.size = 0;\n        }\n\n        // returns true if inserted, false if duplicate\n        insert(data) {\n            var ret = false;\n\n            if (this._root === null) {\n                // empty tree\n                this._root = new Node(data);\n                ret = true;\n                this.size++;\n            }\n            else {\n                var head = new Node(undefined); // fake tree root\n\n                var dir = false;\n                var last = false;\n\n                // setup\n                var gp = null; // grandparent\n                var ggp = head; // grand-grand-parent\n                var p = null; // parent\n                var node = this._root;\n                ggp.right = this._root;\n\n                // search down\n                while (true) {\n                    if (node === null) {\n                        // insert new node at the bottom\n                        node = new Node(data);\n                        p.set_child(dir, node);\n                        ret = true;\n                        this.size++;\n                    }\n                    else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {\n                        // color flip\n                        node.red = true;\n                        node.left.red = false;\n                        node.right.red = false;\n                    }\n\n                    // fix red violation\n                    if (RBTree.is_red(node) && RBTree.is_red(p)) {\n                        var dir2 = ggp.right === gp;\n\n                        if (node === p.get_child(last)) {\n                            ggp.set_child(dir2, RBTree.single_rotate(gp, !last));\n                        }\n                        else {\n                            ggp.set_child(dir2, RBTree.double_rotate(gp, !last));\n                        }\n                    }\n\n                    var cmp = this._comparator(node.data, data);\n\n                    // stop if found\n                    if (cmp === 0) {\n                        break;\n                    }\n\n                    last = dir;\n                    dir = cmp < 0;\n\n                    // update helpers\n                    if (gp !== null) {\n                        ggp = gp;\n                    }\n                    gp = p;\n                    p = node;\n                    node = node.get_child(dir);\n                }\n\n                // update root\n                this._root = head.right;\n            }\n\n            // make root black\n            this._root.red = false;\n\n            return ret;\n        };\n\n        // returns true if removed, false if not found\n        remove(data) {\n            if (this._root === null) {\n                return false;\n            }\n\n            var head = new Node(undefined); // fake tree root\n            var node = head;\n            node.right = this._root;\n            var p = null; // parent\n            var gp = null; // grand parent\n            var found = null; // found item\n            var dir = true;\n\n            while (node.get_child(dir) !== null) {\n                var last = dir;\n\n                // update helpers\n                gp = p;\n                p = node;\n                node = node.get_child(dir);\n\n                var cmp = this._comparator(data, node.data);\n\n                dir = cmp > 0;\n\n                // save found node\n                if (cmp === 0) {\n                    found = node;\n                }\n\n                // push the red node down\n                if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {\n                    if (RBTree.is_red(node.get_child(!dir))) {\n                        var sr = RBTree.single_rotate(node, dir);\n                        p.set_child(last, sr);\n                        p = sr;\n                    }\n                    else if (!RBTree.is_red(node.get_child(!dir))) {\n                        var sibling = p.get_child(!last);\n                        if (sibling !== null) {\n                            if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {\n                                // color flip\n                                p.red = false;\n                                sibling.red = true;\n                                node.red = true;\n                            }\n                            else {\n                                var dir2 = gp.right === p;\n\n                                if (RBTree.is_red(sibling.get_child(last))) {\n                                    gp.set_child(dir2, RBTree.double_rotate(p, last));\n                                }\n                                else if (RBTree.is_red(sibling.get_child(!last))) {\n                                    gp.set_child(dir2, RBTree.single_rotate(p, last));\n                                }\n\n                                // ensure correct coloring\n                                var gpc = gp.get_child(dir2);\n                                gpc.red = true;\n                                node.red = true;\n                                gpc.left.red = false;\n                                gpc.right.red = false;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // replace and remove if found\n            if (found !== null) {\n                found.data = node.data;\n                p.set_child(p.right === node, node.get_child(node.left === null));\n                this.size--;\n            }\n\n            // update root and make it black\n            this._root = head.right;\n            if (this._root !== null) {\n                this._root.red = false;\n            }\n\n            return found !== null;\n        };\n\n        static is_red(node) {\n            return node !== null && node.red;\n        }\n\n        static single_rotate(root, dir) {\n            var save = root.get_child(!dir);\n\n            root.set_child(!dir, save.get_child(dir));\n            save.set_child(dir, root);\n\n            root.red = true;\n            save.red = false;\n\n            return save;\n        }\n\n        static double_rotate(root, dir) {\n            root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));\n            return RBTree.single_rotate(root, dir);\n        }\n    }\n","import {Constraint, Variable, Solver} from './vpsc'\nimport {RBTree} from './rbtree'\nimport {Point} from './geom'\n\n    export interface Leaf {\n        bounds: Rectangle;\n        variable: Variable;\n    }\n\n    export interface ProjectionGroup {\n        bounds: Rectangle;\n        padding: number;\n        stiffness: number;\n        leaves: Leaf[];\n        groups: ProjectionGroup[];\n        minVar: Variable;\n        maxVar: Variable;\n    }\n\n    export function computeGroupBounds(g: ProjectionGroup): Rectangle {\n        g.bounds = typeof g.leaves !== \"undefined\" ?\n            g.leaves.reduce((r: Rectangle, c) => c.bounds.union(r), Rectangle.empty()) :\n            Rectangle.empty();\n        if (typeof g.groups !== \"undefined\")\n            g.bounds = <Rectangle>g.groups.reduce((r: Rectangle, c) => computeGroupBounds(c).union(r), g.bounds);\n        g.bounds = g.bounds.inflate(g.padding);\n        return g.bounds;\n    }\n\n    export class Rectangle {\n        constructor(\n            public x: number,\n            public X: number,\n            public y: number,\n            public Y: number) { }\n\n        static empty(): Rectangle { return new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY); }\n\n        cx(): number { return (this.x + this.X) / 2; }\n\n        cy(): number { return (this.y + this.Y) / 2; }\n\n        overlapX(r: Rectangle): number {\n            var ux = this.cx(), vx = r.cx();\n            if (ux <= vx && r.x < this.X) return this.X - r.x;\n            if (vx <= ux && this.x < r.X) return r.X - this.x;\n            return 0;\n        }\n\n        overlapY(r: Rectangle): number {\n            var uy = this.cy(), vy = r.cy();\n            if (uy <= vy && r.y < this.Y) return this.Y - r.y;\n            if (vy <= uy && this.y < r.Y) return r.Y - this.y;\n            return 0;\n        }\n\n        setXCentre(cx: number): void {\n            var dx = cx - this.cx();\n            this.x += dx;\n            this.X += dx;\n        }\n\n        setYCentre(cy: number): void {\n            var dy = cy - this.cy();\n            this.y += dy;\n            this.Y += dy;\n        }\n\n        width(): number {\n            return this.X - this.x;\n        }\n\n        height(): number {\n            return this.Y - this.y;\n        }\n\n        union(r: Rectangle): Rectangle {\n            return new Rectangle(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));\n        }\n\n        /**\n         * return any intersection points between the given line and the sides of this rectangle\n         * @method lineIntersection\n         * @param x1 number first x coord of line\n         * @param y1 number first y coord of line\n         * @param x2 number second x coord of line\n         * @param y2 number second y coord of line\n         * @return any intersection points found\n         */\n        lineIntersections(x1: number, y1: number, x2: number, y2: number): Array<Point> {\n            var sides = [[this.x, this.y, this.X, this.y],\n                    [this.X, this.y, this.X, this.Y],\n                    [this.X, this.Y, this.x, this.Y],\n                [this.x, this.Y, this.x, this.y]];\n            var intersections = [];\n            for (var i = 0; i < 4; ++i) {\n                var r = Rectangle.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);\n                if (r !== null) intersections.push({ x: r.x, y: r.y });\n            }\n            return intersections;\n        }\n\n        /**\n         * return any intersection points between a line extending from the centre of this rectangle to the given point,\n         *  and the sides of this rectangle\n         * @method lineIntersection\n         * @param x2 number second x coord of line\n         * @param y2 number second y coord of line\n         * @return any intersection points found\n         */\n        rayIntersection(x2: number, y2: number): Point {\n            var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);\n            return ints.length > 0 ? ints[0] : null;\n        }\n\n        vertices(): Point[] {\n            return [\n                { x: this.x, y: this.y },\n                { x: this.X, y: this.y },\n                { x: this.X, y: this.Y },\n                { x: this.x, y: this.Y }];\n        }\n\n        static lineIntersection(\n            x1: number, y1: number,\n            x2: number, y2: number,\n            x3: number, y3: number,\n            x4: number, y4: number): Point {\n            var dx12 = x2 - x1, dx34 = x4 - x3,\n                dy12 = y2 - y1, dy34 = y4 - y3,\n                denominator = dy34 * dx12 - dx34 * dy12;\n            if (denominator == 0) return null;\n            var dx31 = x1 - x3, dy31 = y1 - y3,\n                numa = dx34 * dy31 - dy34 * dx31,\n                a = numa / denominator,\n                numb = dx12 * dy31 - dy12 * dx31,\n                b = numb / denominator;\n            if (a >= 0 && a <= 1 && b >= 0 && b <= 1) {\n                return {\n                    x: x1 + a * dx12,\n                    y: y1 + a * dy12\n                };\n            }\n            return null;\n        }\n\n        inflate(pad: number): Rectangle {\n            return new Rectangle(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);\n        }\n    }\n\n    /**\n     * Returns the endpoints of a line that connects the centre of two rectangles.\n     * @param {Rectangle} [source] The source Rectangle.\n     * @param {Rectangle} [target] The target Rectangle.\n     * @param {number} [ah] The size of the arrow head, a distance to shorten the\n     *                      line by.\n     * @return An object with three point properties, the intersection with the\n     *         source rectangle (sourceIntersection), the intersection with then\n     *         target rectangle (targetIntersection), and the point an arrow\n     *         head of the specified size would need to start (arrowStart).\n     */\n    export function makeEdgeBetween(source: Rectangle, target: Rectangle, ah: number)\n        : { sourceIntersection: Point; targetIntersection: Point; arrowStart: Point } {\n        const si = source.rayIntersection(target.cx(), target.cy()) || { x: source.cx(), y: source.cy() },\n            ti = target.rayIntersection(source.cx(), source.cy()) || { x: target.cx(), y: target.cy() },\n            dx = ti.x - si.x,\n            dy = ti.y - si.y,\n            l = Math.sqrt(dx * dx + dy * dy), al = l - ah;\n        return {\n            sourceIntersection: si,\n            targetIntersection: ti,\n            arrowStart: { x: si.x + al * dx / l, y: si.y + al * dy / l }\n        }\n    }\n\n    /**\n     * Returns the intersection of a line from the given point to the centre\n     * of the target rectangle where it intersects the rectanngle.\n     * @param [source] The source point.\n     * @param {Rectangle} [target] The target Rectangle.\n     * @param {number} [ah] The size of the arrow head, a distance to shorten the\n     *                      line by.\n     * @return The point an arrow head of the specified size would need to start.\n     */\n    export function makeEdgeTo(s: { x: number; y: number }, target: Rectangle, ah: number): Point {\n        var ti = target.rayIntersection(s.x, s.y);\n        if (!ti) ti = { x: target.cx(), y: target.cy() };\n        var dx = ti.x - s.x,\n            dy = ti.y - s.y,\n            l = Math.sqrt(dx * dx + dy * dy);\n        return { x: ti.x - ah * dx / l, y: ti.y - ah * dy / l };\n    }\n\n    class Node {\n        prev: RBTree<Node>;\n        next: RBTree<Node>;\n\n        constructor(public v: Variable, public r: Rectangle, public pos: number) {\n            this.prev = makeRBTree();\n            this.next = makeRBTree();\n        }\n    }\n\n    class Event {\n        constructor(public isOpen: boolean, public v: Node, public pos: number) {}\n    }\n\n    function compareEvents(a: Event, b: Event): number {\n        if (a.pos > b.pos) {\n            return 1;\n        }\n        if (a.pos < b.pos) {\n            return -1;\n        }\n        if (a.isOpen) {\n            // open must come before close\n            return -1;\n        }\n        if (b.isOpen) {\n            // open must come before close\n            return 1;\n        }\n        return 0;\n    }\n\n    function makeRBTree(): RBTree<Node> {\n        return new RBTree<Node>((a, b) => a.pos - b.pos);\n    }\n\n    interface RectAccessors {\n        getCentre: (r: Rectangle) => number;\n        getOpen: (r: Rectangle) => number;\n        getClose: (r: Rectangle) => number;\n        getSize: (r: Rectangle) => number;\n        makeRect: (open: number, close: number, center: number, size: number) => Rectangle;\n        findNeighbours: (v: Node, scanline: RBTree<Node>) => void;\n    }\n\n    var xRect: RectAccessors = {\n        getCentre: r=> r.cx(),\n        getOpen: r=> r.y,\n        getClose: r=> r.Y,\n        getSize: r=> r.width(),\n        makeRect: (open, close, center, size) => new Rectangle(center - size / 2, center + size / 2, open, close) ,\n        findNeighbours: findXNeighbours\n    };\n\n    var yRect: RectAccessors = {\n        getCentre: r=> r.cy(),\n        getOpen: r=> r.x,\n        getClose: r=> r.X,\n        getSize: r=> r.height(),\n        makeRect: (open, close, center, size) => new Rectangle(open, close, center - size / 2, center + size / 2),\n        findNeighbours: findYNeighbours\n    };\n\n    function generateGroupConstraints(root: ProjectionGroup, f: RectAccessors, minSep: number, isContained: boolean = false): Constraint[]\n    {\n        var padding = root.padding,\n            gn = typeof root.groups !== 'undefined' ? root.groups.length : 0,\n            ln = typeof root.leaves !== 'undefined' ? root.leaves.length : 0,\n            childConstraints: Constraint[] = !gn ? []\n            : root.groups.reduce((ccs: Constraint[], g) => ccs.concat(generateGroupConstraints(g, f, minSep, true)), []),\n            n = (isContained ? 2 : 0) + ln + gn,\n            vs: Variable[] = new Array(n),\n            rs: Rectangle[] = new Array(n),\n            i = 0,\n            add = (r, v) => { rs[i] = r; vs[i++] = v };\n        if (isContained) {\n            // if this group is contained by another, then we add two dummy vars and rectangles for the borders\n            var b: Rectangle = root.bounds,\n                c = f.getCentre(b), s = f.getSize(b) / 2,\n                open = f.getOpen(b), close = f.getClose(b),\n                min = c - s + padding / 2, max = c + s - padding / 2;\n            root.minVar.desiredPosition = min;\n            add(f.makeRect(open, close, min, padding), root.minVar);\n            root.maxVar.desiredPosition = max;\n            add(f.makeRect(open, close, max, padding), root.maxVar);\n        }\n        if (ln) root.leaves.forEach(l => add(l.bounds, l.variable));\n        if (gn) root.groups.forEach(g => {\n            var b: Rectangle = g.bounds;\n            add(f.makeRect(f.getOpen(b), f.getClose(b), f.getCentre(b), f.getSize(b)), g.minVar);\n        });\n        var cs = generateConstraints(rs, vs, f, minSep);\n        if (gn) {\n            vs.forEach(v => { v.cOut = [], v.cIn = [] });\n            cs.forEach(c => { c.left.cOut.push(c), c.right.cIn.push(c) });\n            root.groups.forEach(g => {\n                var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;\n                g.minVar.cIn.forEach(c => c.gap += gapAdjustment);\n                g.minVar.cOut.forEach(c => { c.left = g.maxVar; c.gap += gapAdjustment; });\n            });\n        }\n        return childConstraints.concat(cs);\n    }\n\n    function generateConstraints(rs: Rectangle[], vars: Variable[],\n        rect: RectAccessors, minSep: number): Constraint[]\n    {\n        var i, n = rs.length;\n        var N = 2 * n;\n        console.assert(vars.length >= n);\n        var events = new Array<Event>(N);\n        for (i = 0; i < n; ++i) {\n            var r = rs[i];\n            var v = new Node(vars[i], r, rect.getCentre(r));\n            events[i] = new Event(true, v, rect.getOpen(r));\n            events[i + n] = new Event(false, v, rect.getClose(r));\n        }\n        events.sort(compareEvents);\n        var cs = new Array<Constraint>();\n        var scanline = makeRBTree();\n        for (i = 0; i < N; ++i) {\n            var e = events[i];\n            var v = e.v;\n            if (e.isOpen) {\n                scanline.insert(v);\n                rect.findNeighbours(v, scanline);\n            } else {\n                // close event\n                scanline.remove(v);\n                var makeConstraint = (l, r) => {\n                    var sep = (rect.getSize(l.r) + rect.getSize(r.r)) / 2 + minSep;\n                    cs.push(new Constraint(l.v, r.v, sep));\n                };\n                var visitNeighbours = (forward, reverse, mkcon) => {\n                    var u, it = v[forward].iterator();\n                    while ((u = it[forward]()) !== null) {\n                        mkcon(u, v);\n                        u[reverse].remove(v);\n                    }\n                };\n                visitNeighbours(\"prev\", \"next\", (u, v) => makeConstraint(u, v));\n                visitNeighbours(\"next\", \"prev\", (u, v) => makeConstraint(v, u));\n            }\n        }\n        console.assert(scanline.size === 0);\n        return cs;\n    }\n\n    function findXNeighbours(v: Node, scanline: RBTree<Node>): void {\n        var f = (forward, reverse) => {\n            var it = scanline.findIter(v);\n            var u;\n            while ((u = it[forward]()) !== null) {\n                var uovervX = u.r.overlapX(v.r);\n                if (uovervX <= 0 || uovervX <= u.r.overlapY(v.r)) {\n                    v[forward].insert(u);\n                    u[reverse].insert(v);\n                }\n                if (uovervX <= 0) {\n                    break;\n                }\n            }\n        }\n        f(\"next\", \"prev\");\n        f(\"prev\", \"next\");\n    }\n\n    function findYNeighbours(v: Node, scanline: RBTree<Node>): void {\n        var f = (forward, reverse) => {\n            var u = scanline.findIter(v)[forward]();\n            if (u !== null && u.r.overlapX(v.r) > 0) {\n                v[forward].insert(u);\n                u[reverse].insert(v);\n            }\n        }\n        f(\"next\", \"prev\");\n        f(\"prev\", \"next\");\n    }\n\n    export function generateXConstraints(rs: Rectangle[], vars: Variable[]): Constraint[] {\n        return generateConstraints(rs, vars, xRect, 1e-6);\n    }\n\n    export function generateYConstraints(rs: Rectangle[], vars: Variable[]): Constraint[] {\n        return generateConstraints(rs, vars, yRect, 1e-6);\n    }\n\n    export function generateXGroupConstraints(root: ProjectionGroup): Constraint[] {\n        return generateGroupConstraints(root, xRect, 1e-6);\n    }\n\n    export function generateYGroupConstraints(root: ProjectionGroup): Constraint[] {\n        return generateGroupConstraints(root, yRect, 1e-6);\n    }\n\n    export function removeOverlaps(rs: Rectangle[]): void {\n        var vs = rs.map(r => new Variable(r.cx()));\n        var cs = generateXConstraints(rs, vs);\n        var solver = new Solver(vs, cs);\n        solver.solve();\n        vs.forEach((v, i) => rs[i].setXCentre(v.position()));\n        vs = rs.map(r=> new Variable(r.cy()));\n        cs = generateYConstraints(rs, vs);\n        solver = new Solver(vs, cs);\n        solver.solve();\n        vs.forEach((v, i) => rs[i].setYCentre(v.position()));\n    }\n\n    export interface GraphNode extends Leaf {\n        fixed: boolean;\n        fixedWeight?: number;\n        width: number;\n        height: number;\n        x: number;\n        y: number;\n        px: number;\n        py: number;\n    }\n\n    export class IndexedVariable extends Variable {\n        constructor(public index: number, w: number) {\n            super(0, w);\n        }\n    }\n\n    export class Projection {\n        private xConstraints: Constraint[];\n        private yConstraints: Constraint[];\n        private variables: Variable[];\n\n        constructor(private nodes: GraphNode[],\n            private groups: ProjectionGroup[],\n            private rootGroup: ProjectionGroup = null,\n            constraints: any[]= null,\n            private avoidOverlaps: boolean = false)\n        {\n            this.variables = nodes.map((v, i) => {\n                return v.variable = new IndexedVariable(i, 1);\n            });\n\n            if (constraints) this.createConstraints(constraints);\n\n            if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== 'undefined') {\n                nodes.forEach(v => {\n\t\t\t\t\tif (!v.width || !v.height)\n\t\t\t\t\t{\n\t\t\t\t\t\t//If undefined, default to nothing\n\t\t\t\t\t\tv.bounds = new Rectangle(v.x, v.x, v.y, v.y);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n                    var w2 = v.width / 2, h2 = v.height / 2;\n                    v.bounds = new Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);\n                });\n                computeGroupBounds(rootGroup);\n                var i = nodes.length;\n                groups.forEach(g => {\n                    this.variables[i] = g.minVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\n                    this.variables[i] = g.maxVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\n                });\n            }\n        }\n\n\n        private createSeparation(c: any) : Constraint {\n            return new Constraint(\n                this.nodes[c.left].variable,\n                this.nodes[c.right].variable,\n                c.gap,\n                typeof c.equality !== \"undefined\" ? c.equality : false);\n        }\n\n        // simple satisfaction of alignment constraints to ensure initial feasibility\n        private makeFeasible(c: any) {\n            if (!this.avoidOverlaps) return;\n            // sort nodes in constraint by position (along \"guideline\")\n            var axis = 'x', dim = 'width';\n            if (c.axis === 'x') axis = 'y', dim = 'height';\n            var vs: GraphNode[] = c.offsets.map(o => this.nodes[o.node]).sort((a, b) => a[axis] - b[axis]);\n            var p: GraphNode = null;\n            vs.forEach(v => {\n                // if two nodes overlap then shove the second one along\n                if (p) {\n                    let nextPos = p[axis] + p[dim];\n                    if (nextPos > v[axis]) {\n                        v[axis] = nextPos;\n                    }\n                }\n                p = v;\n            });\n        }\n\n        private createAlignment(c: any) {\n            var u = this.nodes[c.offsets[0].node].variable;\n            this.makeFeasible(c);\n            var cs = c.axis === 'x' ? this.xConstraints : this.yConstraints;\n            c.offsets.slice(1).forEach(o => {\n                var v = this.nodes[o.node].variable;\n                cs.push(new Constraint(u, v, o.offset, true));\n            });\n        }\n\n        private createConstraints(constraints: any[]) {\n            var isSep = c => typeof c.type === 'undefined' || c.type === 'separation';\n            this.xConstraints = constraints\n                .filter(c => c.axis === \"x\" && isSep(c))\n                .map(c => this.createSeparation(c));\n            this.yConstraints = constraints\n                .filter(c => c.axis === \"y\" && isSep(c))\n                .map(c => this.createSeparation(c));\n            constraints\n                .filter(c => c.type === 'alignment')\n                .forEach(c => this.createAlignment(c));\n        }\n\n        private setupVariablesAndBounds(x0: number[], y0: number[], desired: number[], getDesired: (v: GraphNode) => number) {\n            this.nodes.forEach((v, i) => {\n                if (v.fixed) {\n                    v.variable.weight = v.fixedWeight ? v.fixedWeight : 1000;\n                    desired[i] = getDesired(v);\n                } else {\n                    v.variable.weight = 1;\n                }\n                var w = (v.width || 0) / 2, h = (v.height || 0) / 2;\n                var ix = x0[i], iy = y0[i];\n                v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);\n            });\n        }\n\n        xProject(x0: number[], y0: number[], x: number[]) {\n            if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints)) return;\n            this.project(x0, y0, x0, x, v=> v.px, this.xConstraints, generateXGroupConstraints,\n                v => v.bounds.setXCentre(x[(<IndexedVariable>v.variable).index] = v.variable.position()),\n                g => {\n                    var xmin = x[(<IndexedVariable>g.minVar).index] = g.minVar.position();\n                    var xmax = x[(<IndexedVariable>g.maxVar).index] = g.maxVar.position();\n                    var p2 = g.padding / 2;\n                    g.bounds.x = xmin - p2;\n                    g.bounds.X = xmax + p2;\n                });\n        }\n\n        yProject(x0: number[], y0: number[], y: number[]) {\n            if (!this.rootGroup && !this.yConstraints) return;\n            this.project(x0, y0, y0, y, v=> v.py, this.yConstraints, generateYGroupConstraints,\n                v => v.bounds.setYCentre(y[(<IndexedVariable>v.variable).index] = v.variable.position()),\n                g => {\n                    var ymin = y[(<IndexedVariable>g.minVar).index] = g.minVar.position();\n                    var ymax = y[(<IndexedVariable>g.maxVar).index] = g.maxVar.position();\n                    var p2 = g.padding / 2;\n                    g.bounds.y = ymin - p2;;\n                    g.bounds.Y = ymax + p2;\n                });\n        }\n\n        projectFunctions(): { (x0: number[], y0: number[], r: number[]): void }[]{\n            return [\n                (x0, y0, x) => this.xProject(x0, y0, x),\n                (x0, y0, y) => this.yProject(x0, y0, y)\n            ];\n        }\n\n        private project(x0: number[], y0: number[], start: number[], desired: number[],\n            getDesired: (v: GraphNode) => number,\n            cs: Constraint[],\n            generateConstraints: (g: ProjectionGroup) => Constraint[],\n            updateNodeBounds: (v: GraphNode) => any,\n            updateGroupBounds: (g: ProjectionGroup) => any)\n        {\n            this.setupVariablesAndBounds(x0, y0, desired, getDesired);\n            if (this.rootGroup && this.avoidOverlaps) {\n                computeGroupBounds(this.rootGroup);\n                cs = cs.concat(generateConstraints(this.rootGroup));\n            }\n            this.solve(this.variables, cs, start, desired);\n            this.nodes.forEach(updateNodeBounds);\n            if (this.rootGroup && this.avoidOverlaps) {\n                this.groups.forEach(updateGroupBounds);\n                computeGroupBounds(this.rootGroup);\n            }\n        }\n\n        private solve(vs: Variable[], cs: Constraint[], starting: number[], desired: number[]) {\n            var solver = new Solver(vs, cs);\n            solver.setStartingPositions(starting);\n            solver.setDesiredPositions(desired);\n            solver.solve();\n        }\n    }\n","\nexport class PairingHeap<T> {\n    private subheaps : PairingHeap<T>[];\n    // from: https://gist.github.com/nervoussystem\n    //{elem:object, subheaps:[array of heaps]}\n    constructor(public elem: T) {\n        this.subheaps = [];\n    }\n\n    public toString(selector) : string {\n        var str = \"\", needComma = false;\n        for (var i = 0; i < this.subheaps.length; ++i) {\n            var subheap: PairingHeap<T> = this.subheaps[i];\n            if (!subheap.elem) {\n                needComma = false;\n                continue;\n            }\n            if (needComma) {\n                str = str + \",\";\n            }\n            str = str + subheap.toString(selector);\n            needComma = true;\n        }\n        if (str !== \"\") {\n            str = \"(\" + str + \")\";\n        }\n        return (this.elem ? selector(this.elem) : \"\") + str;\n    }\n\n    public forEach(f) {\n        if (!this.empty()) {\n            f(this.elem, this);\n            this.subheaps.forEach(s => s.forEach(f));\n        }\n    }\n\n    public count(): number {\n        return this.empty() ? 0 : 1 + this.subheaps.reduce((n: number, h: PairingHeap<T>) => {\n            return n + h.count();\n        }, 0);\n    }\n\n    public min() : T {\n        return this.elem;\n    }\n\n    public empty() : boolean {\n        return this.elem == null;\n    }\n\n    public contains(h: PairingHeap<T>): boolean {\n        if (this === h) return true;\n        for (var i = 0; i < this.subheaps.length; i++) {\n            if (this.subheaps[i].contains(h)) return true;\n        }\n        return false;\n    }\n\n    public isHeap(lessThan: (a: T, b: T) => boolean): boolean {\n        return this.subheaps.every(h=> lessThan(this.elem, h.elem) && h.isHeap(lessThan));\n    }\n\n    public insert(obj : T, lessThan) : PairingHeap<T> {\n        return this.merge(new PairingHeap<T>(obj), lessThan);\n    }\n\n    public merge(heap2: PairingHeap<T>, lessThan): PairingHeap<T> {\n        if (this.empty()) return heap2;\n        else if (heap2.empty()) return this;\n        else if (lessThan(this.elem, heap2.elem)) {\n            this.subheaps.push(heap2);\n            return this;\n        } else {\n            heap2.subheaps.push(this);\n            return heap2;\n        }\n    }\n\n    public removeMin(lessThan: (a: T, b: T) => boolean): PairingHeap<T> {\n        if (this.empty()) return null;\n        else return this.mergePairs(lessThan);\n    }\n\n    public mergePairs(lessThan: (a: T, b: T) => boolean) : PairingHeap<T> {\n        if (this.subheaps.length == 0) return new PairingHeap<T>(null);\n        else if (this.subheaps.length == 1) { return this.subheaps[0]; }\n        else {\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\n            var remaining = this.mergePairs(lessThan);\n            return firstPair.merge(remaining, lessThan);\n        }\n    }\n    public decreaseKey(subheap: PairingHeap<T>, newValue: T, setHeapNode: (e: T, h: PairingHeap<T>)=>void, lessThan: (a: T, b: T) => boolean): PairingHeap<T> {\n        var newHeap = subheap.removeMin(lessThan);\n        //reassign subheap values to preserve tree\n        subheap.elem = newHeap.elem;\n        subheap.subheaps = newHeap.subheaps;\n        if (setHeapNode !== null && newHeap.elem !== null) {\n            setHeapNode(subheap.elem, subheap);\n        }\n        var pairingNode = new PairingHeap(newValue);\n        if (setHeapNode !== null) {\n            setHeapNode(newValue, pairingNode);\n        }\n        return this.merge(pairingNode, lessThan);\n    }\n}\n\n/**\n * @class PriorityQueue a min priority queue backed by a pairing heap\n */\nexport class PriorityQueue<T> {\n    private root : PairingHeap<T>;\n    constructor(private lessThan: (a: T, b: T) => boolean) { }\n    /**\n     * @method top\n     * @return the top element (the min element as defined by lessThan)\n     */\n    public top() : T {\n        if (this.empty()) { return null; }\n        return this.root.elem;\n    }\n    /**\n     * @method push\n     * put things on the heap\n     */\n    public push(...args: T[]): PairingHeap<T> {\n        var pairingNode;\n        for (var i = 0, arg; arg=args[i]; ++i) {\n            pairingNode = new PairingHeap(arg);\n            this.root = this.empty() ?\n                pairingNode : this.root.merge(pairingNode, this.lessThan);\n        }\n        return pairingNode;\n    }\n    /**\n     * @method empty\n     * @return true if no more elements in queue\n     */\n    public empty(): boolean {\n        return !this.root || !this.root.elem;\n    }\n    /**\n     * @method isHeap check heap condition (for testing)\n     * @return true if queue is in valid state\n     */\n    public isHeap(): boolean {\n        return this.root.isHeap(this.lessThan);\n    }\n    /**\n     * @method forEach apply f to each element of the queue\n     * @param f function to apply\n     */\n    public forEach(f) {\n        this.root.forEach(f);\n    }\n    /**\n     * @method pop remove and return the min element from the queue\n     */\n    public pop(): T {\n        if (this.empty()) {\n            return null;\n        }\n        var obj = this.root.min();\n        this.root = this.root.removeMin(this.lessThan);\n        return obj;\n    }\n    /**\n     * @method reduceKey reduce the key value of the specified heap node\n     */\n    public reduceKey(heapNode: PairingHeap<T>, newKey: T, setHeapNode: (e: T, h: PairingHeap<T>)=>void = null): void {\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\n    }\n    public toString(selector) {\n        return this.root.toString(selector);\n    }\n    /**\n     * @method count\n     * @return number of elements in queue\n     */\n    public count() {\n        return this.root.count();\n    }\n}\n","import {PairingHeap, PriorityQueue} from './pqueue'\n\nclass Neighbour {\n    constructor(public id: number, public distance: number) { }\n}\n\nclass Node {\n    constructor(public id: number) {\n        this.neighbours = [];\n    }\n    neighbours: Neighbour[];\n    d: number;\n    prev: Node;\n    q: PairingHeap<Node>;\n}\n\nclass QueueEntry {\n    constructor(public node: Node, public prev: QueueEntry, public d: number) {}\n}\n\n/**\n * calculates all-pairs shortest paths or shortest paths from a single node\n * @class Calculator\n * @constructor\n * @param n {number} number of nodes\n * @param es {Edge[]} array of edges\n */\nexport class Calculator<Link> {\n    private neighbours: Node[];\n\n    constructor(public n: number, public es: Link[], getSourceIndex: (l: Link) => number, getTargetIndex: (l: Link) => number, getLength: (l: Link) => number) {\n        this.neighbours = new Array(this.n);\n        var i = this.n; while (i--) this.neighbours[i] = new Node(i);\n\n        i = this.es.length; while (i--) {\n            var e = this.es[i];\n            var u: number = getSourceIndex(e), v: number = getTargetIndex(e);\n            var d = getLength(e);\n            this.neighbours[u].neighbours.push(new Neighbour(v, d));\n            this.neighbours[v].neighbours.push(new Neighbour(u, d));\n        }\n    }\n\n    /**\n     * compute shortest paths for graph over n nodes with edges an array of source/target pairs\n     * edges may optionally have a length attribute.  1 is the default.\n     * Uses Johnson's algorithm.\n     *\n     * @method DistanceMatrix\n     * @return the distance matrix\n     */\n    DistanceMatrix(): number[][] {\n        var D = new Array(this.n);\n        for (var i = 0; i < this.n; ++i) {\n            D[i] = this.dijkstraNeighbours(i);\n        }\n        return D;\n    }\n\n    /**\n     * get shortest paths from a specified start node\n     * @method DistancesFromNode\n     * @param start node index\n     * @return array of path lengths\n     */\n    DistancesFromNode(start: number): number[] {\n        return this.dijkstraNeighbours(start);\n    }\n\n    PathFromNodeToNode(start: number, end: number): number[] {\n        return this.dijkstraNeighbours(start, end);\n    }\n\n    // find shortest path from start to end, with the opportunity at\n    // each edge traversal to compute a custom cost based on the\n    // previous edge.  For example, to penalise bends.\n    PathFromNodeToNodeWithPrevCost(\n        start: number,\n        end: number,\n        prevCost: (u:number,v:number,w:number)=>number): number[]\n    {\n        var q = new PriorityQueue<QueueEntry>((a, b) => a.d <= b.d),\n            u: Node = this.neighbours[start],\n            qu: QueueEntry = new QueueEntry(u,null,0),\n            visitedFrom = {};\n        q.push(qu);\n        while(!q.empty()) {\n            qu = q.pop();\n            u = qu.node;\n            if (u.id === end) {\n                break;\n            }\n            var i = u.neighbours.length; while (i--) {\n                var neighbour = u.neighbours[i],\n                    v = this.neighbours[neighbour.id];\n\n                // don't double back\n                if (qu.prev && v.id === qu.prev.node.id) continue;\n\n                // don't retraverse an edge if it has already been explored\n                // from a lower cost route\n                var viduid = v.id + ',' + u.id;\n                if(viduid in visitedFrom && visitedFrom[viduid] <= qu.d)\n                    continue;\n\n                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0,\n                    t = qu.d + neighbour.distance + cc;\n\n                // store cost of this traversal\n                visitedFrom[viduid] = t;\n                q.push(new QueueEntry(v, qu, t));\n            }\n        }\n        var path:number[] = [];\n        while (qu.prev) {\n            qu = qu.prev;\n            path.push(qu.node.id);\n        }\n        return path;\n    }\n\n    private dijkstraNeighbours(start: number, dest: number = -1): number[] {\n        var q = new PriorityQueue<Node>((a, b) => a.d <= b.d),\n            i = this.neighbours.length,\n            d: number[] = new Array(i);\n        while (i--) {\n            var node: Node = this.neighbours[i];\n            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\n            node.q = q.push(node);\n        }\n        while (!q.empty()) {\n            // console.log(q.toString(function (u) { return u.id + \"=\" + (u.d === Number.POSITIVE_INFINITY ? \"\\u221E\" : u.d.toFixed(2) )}));\n            var u = q.pop();\n            d[u.id] = u.d;\n            if (u.id === dest) {\n                var path: number[] = [];\n                var v = u;\n                while (typeof v.prev !== 'undefined') {\n                    path.push(v.prev.id);\n                    v = v.prev;\n                }\n                return path;\n            }\n            i = u.neighbours.length; while (i--) {\n                var neighbour = u.neighbours[i];\n                var v = this.neighbours[neighbour.id];\n                var t = u.d + neighbour.distance;\n                if (u.d !== Number.MAX_VALUE && v.d > t) {\n                    v.d = t;\n                    v.prev = u;\n                    q.reduceKey(v.q, v, (e,q)=>e.q = q);\n                }\n            }\n        }\n        return d;\n    }\n}\n","import {Rectangle} from './rectangle'\n    export class Point {\n        x: number;\n        y: number;\n    }\n\n    export class LineSegment {\n        constructor(public x1: number, public y1: number, public x2: number, public y2: number) { }\n    }\n\n    export class PolyPoint extends Point {\n        polyIndex: number;\n    }\n\n    /** tests if a point is Left|On|Right of an infinite line.\n     * @param points P0, P1, and P2\n     * @return >0 for P2 left of the line through P0 and P1\n     *            =0 for P2 on the line\n     *            <0 for P2 right of the line\n     */\n    export function isLeft(P0: Point, P1: Point, P2: Point): number {\n        return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);\n    }\n\n    function above(p: Point, vi: Point, vj: Point): boolean {\n        return isLeft(p, vi, vj) > 0;\n    }\n\n    function below(p: Point, vi: Point, vj: Point): boolean {\n        return isLeft(p, vi, vj) < 0;\n    }\n\n\n    /**\n     * returns the convex hull of a set of points using Andrew's monotone chain algorithm\n     * see: http://geomalgorithms.com/a10-_hull-1.html#Monotone%20Chain\n     * @param S array of points\n     * @return the convex hull as an array of points\n     */\n    export function ConvexHull(S: Point[]): Point[] {\n        var P = S.slice(0).sort((a, b) => a.x !== b.x ? b.x - a.x : b.y - a.y);\n        var n = S.length, i;\n        var minmin = 0;\n        var xmin = P[0].x;\n        for (i = 1; i < n; ++i) {\n            if (P[i].x !== xmin) break;\n        }\n        var minmax = i - 1;\n        var H: Point[] = [];\n        H.push(P[minmin]); // push minmin point onto stack\n        if (minmax === n - 1) { // degenerate case: all x-coords == xmin\n            if (P[minmax].y !== P[minmin].y) // a  nontrivial segment\n                H.push(P[minmax]);\n        } else {\n            // Get the indices of points with max x-coord and min|max y-coord\n            var maxmin, maxmax = n - 1;\n            var xmax = P[n - 1].x;\n            for (i = n - 2; i >= 0; i--)\n                if (P[i].x !== xmax) break;\n            maxmin = i + 1;\n\n            // Compute the lower hull on the stack H\n            i = minmax;\n            while (++i <= maxmin) {\n                // the lower line joins P[minmin]  with P[maxmin]\n                if (isLeft(P[minmin], P[maxmin], P[i]) >= 0 && i < maxmin)\n                    continue; // ignore P[i] above or on the lower line\n\n                while (H.length > 1) // there are at least 2 points on the stack\n                {\n                    // test if  P[i] is left of the line at the stack top\n                    if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                        break; // P[i] is a new hull  vertex\n                    else\n                        H.length -= 1; // pop top point off  stack\n                }\n                if (i != minmin) H.push(P[i]);\n            }\n\n            // Next, compute the upper hull on the stack H above the bottom hull\n            if (maxmax != maxmin) // if  distinct xmax points\n                H.push(P[maxmax]); // push maxmax point onto stack\n            var bot = H.length; // the bottom point of the upper hull stack\n            i = maxmin;\n            while (--i >= minmax) {\n                // the upper line joins P[maxmax]  with P[minmax]\n                if (isLeft(P[maxmax], P[minmax], P[i]) >= 0 && i > minmax)\n                    continue; // ignore P[i] below or on the upper line\n\n                while (H.length > bot) // at least 2 points on the upper stack\n                {\n                    // test if  P[i] is left of the line at the stack top\n                    if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                        break; // P[i] is a new hull  vertex\n                    else\n                        H.length -= 1; // pop top point off  stack\n                }\n                if (i != minmin) H.push(P[i]); // push P[i] onto stack\n            }\n        }\n        return H;\n    }\n\n    // apply f to the points in P in clockwise order around the point p\n    export function clockwiseRadialSweep(p: Point, P: Point[], f: (p: Point) => void) {\n        P.slice(0).sort(\n            (a, b) => Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x)\n            ).forEach(f);\n    }\n\n    function nextPolyPoint(p: PolyPoint, ps: PolyPoint[]): PolyPoint {\n        if (p.polyIndex === ps.length - 1) return ps[0];\n        return ps[p.polyIndex + 1];\n    }\n\n    function prevPolyPoint(p: PolyPoint, ps: PolyPoint[]): PolyPoint {\n        if (p.polyIndex === 0) return ps[ps.length - 1];\n        return ps[p.polyIndex - 1];\n    }\n\n    // tangent_PointPolyC(): fast binary search for tangents to a convex polygon\n    //    Input:  P = a 2D point (exterior to the polygon)\n    //            n = number of polygon vertices\n    //            V = array of vertices for a 2D convex polygon\n    //    Output: rtan = index of rightmost tangent point V[rtan]\n    //            ltan = index of leftmost tangent point V[ltan]\n    function tangent_PointPolyC(P: Point, V: Point[]): { rtan: number; ltan: number } {\n        // Rtangent_PointPolyC and Ltangent_PointPolyC require polygon to be\n        // \"closed\" with the first vertex duplicated at end, so V[n-1] = V[0].\n        let Vclosed = V.slice(0);  // Copy V\n        Vclosed.push(V[0]);        // Add V[0] at end\n\n        return { rtan: Rtangent_PointPolyC(P, Vclosed), ltan: Ltangent_PointPolyC(P, Vclosed) };\n    }\n\n\n    // Rtangent_PointPolyC(): binary search for convex polygon right tangent\n    //    Input:  P = a 2D point (exterior to the polygon)\n    //            n = number of polygon vertices\n    //            V = array of vertices for a 2D convex polygon with first\n    //                vertex duplicated as last, so V[n-1] = V[0]\n    //    Return: index \"i\" of rightmost tangent point V[i]\n    function Rtangent_PointPolyC(P: Point, V: Point[]): number {\n        var n = V.length - 1;\n\n        // use binary search for large convex polygons\n        var a: number, b: number, c: number;            // indices for edge chain endpoints\n        var upA: boolean, dnC: boolean;           // test for up direction of edges a and c\n\n        // rightmost tangent = maximum for the isLeft() ordering\n        // test if V[0] is a local maximum\n        if (below(P, V[1], V[0]) && !above(P, V[n - 1], V[0]))\n            return 0;               // V[0] is the maximum tangent point\n\n        for (a = 0, b = n; ;) {          // start chain = [0,n] with V[n]=V[0]\n            if (b - a === 1)\n                if (above(P, V[a], V[b]))\n                    return a;\n                else\n                    return b;\n\n            c = Math.floor((a + b) / 2);        // midpoint of [a,b], and 0<c<n\n            dnC = below(P, V[c + 1], V[c]);\n            if (dnC && !above(P, V[c - 1], V[c]))\n                return c;          // V[c] is the maximum tangent point\n\n            // no max yet, so continue with the binary search\n            // pick one of the two subchains [a,c] or [c,b]\n            upA = above(P, V[a + 1], V[a]);\n            if (upA) {                       // edge a points up\n                if (dnC)                         // edge c points down\n                    b = c;                           // select [a,c]\n                else {                           // edge c points up\n                    if (above(P, V[a], V[c]))     // V[a] above V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] below V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n            else {                           // edge a points down\n                if (!dnC)                        // edge c points up\n                    a = c;                           // select [c,b]\n                else {                           // edge c points down\n                    if (below(P, V[a], V[c]))     // V[a] below V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] above V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n        }\n    }\n\n    // Ltangent_PointPolyC(): binary search for convex polygon left tangent\n    //    Input:  P = a 2D point (exterior to the polygon)\n    //            n = number of polygon vertices\n    //            V = array of vertices for a 2D convex polygon with first\n    //                vertex duplicated as last, so V[n-1] = V[0]\n    //    Return: index \"i\" of leftmost tangent point V[i]\n    function Ltangent_PointPolyC(P: Point, V: Point[]): number {\n        var n = V.length - 1;\n        // use binary search for large convex polygons\n        var a: number, b: number, c: number;             // indices for edge chain endpoints\n        var dnA: boolean, dnC: boolean;           // test for down direction of edges a and c\n\n        // leftmost tangent = minimum for the isLeft() ordering\n        // test if V[0] is a local minimum\n        if (above(P, V[n - 1], V[0]) && !below(P, V[1], V[0]))\n            return 0;               // V[0] is the minimum tangent point\n\n        for (a = 0, b = n; ;) {          // start chain = [0,n] with V[n] = V[0]\n            if (b - a === 1)\n                if (below(P, V[a], V[b]))\n                    return a;\n                else\n                    return b;\n\n            c = Math.floor((a + b) / 2);        // midpoint of [a,b], and 0<c<n\n            dnC = below(P, V[c + 1], V[c]);\n            if (above(P, V[c - 1], V[c]) && !dnC)\n                return c;          // V[c] is the minimum tangent point\n\n            // no min yet, so continue with the binary search\n            // pick one of the two subchains [a,c] or [c,b]\n            dnA = below(P, V[a + 1], V[a]);\n            if (dnA) {                       // edge a points down\n                if (!dnC)                        // edge c points up\n                    b = c;                           // select [a,c]\n                else {                           // edge c points down\n                    if (below(P, V[a], V[c]))     // V[a] below V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] above V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n            else {                           // edge a points up\n                if (dnC)                         // edge c points down\n                    a = c;                           // select [c,b]\n                else {                           // edge c points up\n                    if (above(P, V[a], V[c]))     // V[a] above V[c]\n                        b = c;                       // select [a,c]\n                    else                          // V[a] below V[c]\n                        a = c;                       // select [c,b]\n                }\n            }\n        }\n    }\n\n    // RLtangent_PolyPolyC(): get the RL tangent between two convex polygons\n    //    Input:  m = number of vertices in polygon 1\n    //            V = array of vertices for convex polygon 1 with V[m]=V[0]\n    //            n = number of vertices in polygon 2\n    //            W = array of vertices for convex polygon 2 with W[n]=W[0]\n    //    Output: *t1 = index of tangent point V[t1] for polygon 1\n    //            *t2 = index of tangent point W[t2] for polygon 2\n    export function tangent_PolyPolyC(V: Point[], W: Point[], t1: (a: Point, b: Point[]) => number, t2: (a: Point, b: Point[]) => number, cmp1: (a: Point, b: Point, c: Point) => boolean, cmp2: (a: Point, b: Point, c: Point) => boolean): { t1: number; t2: number } {\n        var ix1: number, ix2: number;      // search indices for polygons 1 and 2\n\n        // first get the initial vertex on each polygon\n        ix1 = t1(W[0], V);   // right tangent from W[0] to V\n        ix2 = t2(V[ix1], W); // left tangent from V[ix1] to W\n\n        // ping-pong linear search until it stabilizes\n        var done = false;                    // flag when done\n        while (!done) {\n            done = true;                     // assume done until...\n            while (true) {\n                if (ix1 === V.length - 1) ix1 = 0;\n                if (cmp1(W[ix2], V[ix1], V[ix1 + 1])) break;\n                ++ix1;                       // get Rtangent from W[ix2] to V\n            }\n            while (true) {\n                if (ix2 === 0) ix2 = W.length - 1;\n                if (cmp2(V[ix1], W[ix2], W[ix2 - 1])) break;\n                --ix2;                       // get Ltangent from V[ix1] to W\n                done = false;                // not done if had to adjust this\n            }\n        }\n        return { t1: ix1, t2: ix2 };\n    }\n\n    export function LRtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        var rl = RLtangent_PolyPolyC(W, V);\n        return { t1: rl.t2, t2: rl.t1 };\n    }\n\n    export function RLtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);\n    }\n\n    export function LLtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);\n    }\n\n    export function RRtangent_PolyPolyC(V: Point[], W: Point[]): { t1: number; t2: number } {\n        return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);\n    }\n\n    export class BiTangent {\n        constructor(public t1: number, public t2: number) { }\n    }\n\n    export class BiTangents {\n        rl: BiTangent;\n        lr: BiTangent;\n        ll: BiTangent;\n        rr: BiTangent;\n    }\n\n    export class TVGPoint extends Point {\n        vv: VisibilityVertex;\n    }\n\n    export class VisibilityVertex {\n        constructor(\n            public id: number,\n            public polyid: number,\n            public polyvertid: number,\n            public p: TVGPoint)\n        {\n            p.vv = this;\n        }\n    }\n\n    export class VisibilityEdge {\n        constructor(\n            public source: VisibilityVertex,\n            public target: VisibilityVertex) { }\n        length(): number {\n            var dx = this.source.p.x - this.target.p.x;\n            var dy = this.source.p.y - this.target.p.y;\n            return Math.sqrt(dx * dx + dy * dy);\n        }\n    }\n\n    export class TangentVisibilityGraph {\n        V: VisibilityVertex[] = [];\n        E: VisibilityEdge[] = [];\n        constructor(public P: TVGPoint[][], g0?: { V: VisibilityVertex[]; E: VisibilityEdge[] }) {\n            if (!g0) {\n                var n = P.length;\n                // For each node...\n                for (var i = 0; i < n; i++) {\n                    var p = P[i];\n                    // For each node vertex.\n                    for (var j = 0; j < p.length; ++j) {\n                        var pj = p[j],\n                            vv = new VisibilityVertex(this.V.length, i, j, pj);\n                        this.V.push(vv);\n                        // For the every iteration but the first, generate an\n                        // edge from the previous visibility vertex to the\n                        // current one.\n                        if (j > 0) this.E.push(new VisibilityEdge(p[j - 1].vv, vv));\n                    }\n                    // Add a visibility edge from the first vertex to the last.\n                    if (p.length > 1) this.E.push(new VisibilityEdge(p[0].vv, p[p.length - 1].vv));\n                }\n                for (var i = 0; i < n - 1; i++) {\n                    var Pi = P[i];\n                    for (var j = i + 1; j < n; j++) {\n                        var Pj = P[j],\n                            t = tangents(Pi, Pj);\n                        for (var q in t) {\n                            var c = t[q],\n                                source = Pi[c.t1], target = Pj[c.t2];\n                            this.addEdgeIfVisible(source, target, i, j);\n                        }\n                    }\n                }\n            } else {\n                this.V = g0.V.slice(0);\n                this.E = g0.E.slice(0);\n            }\n        }\n        addEdgeIfVisible(u: TVGPoint, v: TVGPoint, i1: number, i2: number) {\n            if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {\n                this.E.push(new VisibilityEdge(u.vv, v.vv));\n            }\n        }\n        addPoint(p: TVGPoint, i1: number): VisibilityVertex {\n            var n = this.P.length;\n            this.V.push(new VisibilityVertex(this.V.length, n, 0, p));\n            for (var i = 0; i < n; ++i) {\n                if (i === i1) continue;\n                var poly = this.P[i],\n                    t = tangent_PointPolyC(p, poly);\n                this.addEdgeIfVisible(p, poly[t.ltan], i1, i);\n                this.addEdgeIfVisible(p, poly[t.rtan], i1, i);\n            }\n            return p.vv;\n        }\n        private intersectsPolys(l: LineSegment, i1: number, i2: number): boolean {\n            for (var i = 0, n = this.P.length; i < n; ++i) {\n                if (i != i1 && i != i2 && intersects(l, this.P[i]).length > 0) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    function intersects(l: LineSegment, P: Point[]) {\n        var ints = [];\n        for (var i = 1, n = P.length; i < n; ++i) {\n            var int = Rectangle.lineIntersection(\n                l.x1, l.y1,\n                l.x2, l.y2,\n                P[i - 1].x, P[i - 1].y,\n                P[i].x, P[i].y\n                );\n            if (int) ints.push(int);\n        }\n        return ints;\n    }\n\n    export function tangents(V: Point[], W: Point[]): BiTangents\n    {\n        var m = V.length - 1, n = W.length - 1;\n        var bt = new BiTangents();\n        for (var i = 0; i <= m; ++i) {\n            for (var j = 0; j <= n; ++j) {\n                var v1 = V[i == 0 ? m : i - 1];\n                var v2 = V[i];\n                var v3 = V[i == m ? 0 : i + 1];\n                var w1 = W[j == 0 ? n : j - 1];\n                var w2 = W[j];\n                var w3 = W[j == n ? 0 : j + 1];\n                var v1v2w2 = isLeft(v1, v2, w2);\n                var v2w1w2 = isLeft(v2, w1, w2);\n                var v2w2w3 = isLeft(v2, w2, w3);\n                var w1w2v2 = isLeft(w1, w2, v2);\n                var w2v1v2 = isLeft(w2, v1, v2);\n                var w2v2v3 = isLeft(w2, v2, v3);\n                if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0\n                    && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {\n                        bt.ll = new BiTangent(i, j);\n                } else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0\n                    && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {\n                        bt.rr = new BiTangent(i, j);\n                } else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0\n                    && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {\n                        bt.rl = new BiTangent(i, j);\n                } else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0\n                    && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {\n                        bt.lr = new BiTangent(i, j);\n                }\n            }\n        }\n        return bt;\n    }\n\n    function isPointInsidePoly(p: Point, poly: Point[]): boolean {\n        for (var i = 1, n = poly.length; i < n; ++i)\n            if (below(poly[i - 1], poly[i], p)) return false;\n        return true;\n    }\n\n    function isAnyPInQ(p: Point[], q: Point[]): boolean {\n        return !p.every(v => !isPointInsidePoly(v, q));\n    }\n\n    export function polysOverlap(p: Point[], q: Point[]): boolean {\n        if (isAnyPInQ(p, q)) return true;\n        if (isAnyPInQ(q, p)) return true;\n        for (var i = 1, n = p.length; i < n; ++i) {\n            var v = p[i], u = p[i - 1];\n            if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length > 0) return true;\n        }\n        return false;\n    }\n","    var packingOptions = {\n        PADDING: 10,\n        GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,\n        FLOAT_EPSILON: 0.0001,\n        MAX_INERATIONS: 100\n    };\n\n    // assign x, y to nodes while using box packing algorithm for disconnected graphs\n    export function applyPacking(graphs:Array<any>, w, h, node_size, desired_ratio = 1, centerGraph = true) {\n\n        var init_x = 0,\n            init_y = 0,\n\n            svg_width = w,\n            svg_height = h,\n\n            desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1,\n            node_size = typeof node_size !== 'undefined' ? node_size : 0,\n\n            real_width = 0,\n            real_height = 0,\n            min_width = 0,\n\n            global_bottom = 0,\n            line = [];\n\n        if (graphs.length == 0)\n            return;\n\n        /// that would take care of single nodes problem\n        // graphs.forEach(function (g) {\n        //     if (g.array.length == 1) {\n        //         g.array[0].x = 0;\n        //         g.array[0].y = 0;\n        //     }\n        // });\n\n        calculate_bb(graphs);\n        apply(graphs, desired_ratio);\n        if(centerGraph) {\n            put_nodes_to_right_positions(graphs);\n        }\n\n        // get bounding boxes for all separate graphs\n        function calculate_bb(graphs) {\n\n            graphs.forEach(function (g) {\n                calculate_single_bb(g)\n            });\n\n            function calculate_single_bb(graph) {\n                var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE,\n                    max_x = 0, max_y = 0;\n\n                graph.array.forEach(function (v) {\n                    var w = typeof v.width !== 'undefined' ? v.width : node_size;\n                    var h = typeof v.height !== 'undefined' ? v.height : node_size;\n                    w /= 2;\n                    h /= 2;\n                    max_x = Math.max(v.x + w, max_x);\n                    min_x = Math.min(v.x - w, min_x);\n                    max_y = Math.max(v.y + h, max_y);\n                    min_y = Math.min(v.y - h, min_y);\n                });\n\n                graph.width = max_x - min_x;\n                graph.height = max_y - min_y;\n            }\n        }\n\n        //function plot(data, left, right, opt_x, opt_y) {\n        //    // plot the cost function\n        //    var plot_svg = d3.select(\"body\").append(\"svg\")\n        //        .attr(\"width\", function () { return 2 * (right - left); })\n        //        .attr(\"height\", 200);\n\n\n        //    var x = d3.time.scale().range([0, 2 * (right - left)]);\n\n        //    var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n        //    plot_svg.append(\"g\").attr(\"class\", \"x axis\")\n        //        .attr(\"transform\", \"translate(0, 199)\")\n        //        .call(xAxis);\n\n        //    var lastX = 0;\n        //    var lastY = 0;\n        //    var value = 0;\n        //    for (var r = left; r < right; r += 1) {\n        //        value = step(data, r);\n        //        // value = 1;\n\n        //        plot_svg.append(\"line\").attr(\"x1\", 2 * (lastX - left))\n        //            .attr(\"y1\", 200 - 30 * lastY)\n        //            .attr(\"x2\", 2 * r - 2 * left)\n        //            .attr(\"y2\", 200 - 30 * value)\n        //            .style(\"stroke\", \"rgb(6,120,155)\");\n\n        //        lastX = r;\n        //        lastY = value;\n        //    }\n\n        //    plot_svg.append(\"circle\").attr(\"cx\", 2 * opt_x - 2 * left).attr(\"cy\", 200 - 30 * opt_y)\n        //        .attr(\"r\", 5).style('fill', \"rgba(0,0,0,0.5)\");\n\n        //}\n\n        // actual assigning of position to nodes\n        function put_nodes_to_right_positions(graphs) {\n            graphs.forEach(function (g) {\n                // calculate current graph center:\n                var center = { x: 0, y: 0 };\n\n                g.array.forEach(function (node) {\n                    center.x += node.x;\n                    center.y += node.y;\n                });\n\n                center.x /= g.array.length;\n                center.y /= g.array.length;\n\n                // calculate current top left corner:\n                var corner = { x: center.x - g.width / 2, y: center.y - g.height / 2 };\n                var offset = { x: g.x - corner.x + svg_width / 2 - real_width / 2, y: g.y - corner.y + svg_height / 2 - real_height / 2};\n\n                // put nodes:\n                g.array.forEach(function (node) {\n                    node.x += offset.x;\n                    node.y += offset.y;\n                });\n            });\n        }\n\n        // starts box packing algorithm\n        // desired ratio is 1 by default\n        function apply(data, desired_ratio) {\n            var curr_best_f = Number.POSITIVE_INFINITY;\n            var curr_best = 0;\n            data.sort(function (a, b) { return b.height - a.height; });\n\n            min_width = data.reduce(function (a, b) {\n                return a.width < b.width ? a.width : b.width;\n            });\n\n            var left = x1 = min_width;\n            var right = x2 = get_entire_width(data);\n            var iterationCounter = 0;\n\n            var f_x1 = Number.MAX_VALUE;\n            var f_x2 = Number.MAX_VALUE;\n            var flag = -1; // determines which among f_x1 and f_x2 to recompute\n\n\n            var dx = Number.MAX_VALUE;\n            var df = Number.MAX_VALUE;\n\n            while ((dx > min_width) || df > packingOptions.FLOAT_EPSILON) {\n\n                if (flag != 1) {\n                    var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;\n                    var f_x1 = step(data, x1);\n                }\n                if (flag != 0) {\n                    var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;\n                    var f_x2 = step(data, x2);\n                }\n\n                dx = Math.abs(x1 - x2);\n                df = Math.abs(f_x1 - f_x2);\n\n                if (f_x1 < curr_best_f) {\n                    curr_best_f = f_x1;\n                    curr_best = x1;\n                }\n\n                if (f_x2 < curr_best_f) {\n                    curr_best_f = f_x2;\n                    curr_best = x2;\n                }\n\n                if (f_x1 > f_x2) {\n                    left = x1;\n                    x1 = x2;\n                    f_x1 = f_x2;\n                    flag = 1;\n                } else {\n                    right = x2;\n                    x2 = x1;\n                    f_x2 = f_x1;\n                    flag = 0;\n                }\n\n                if (iterationCounter++ > 100) {\n                    break;\n                }\n            }\n            // plot(data, min_width, get_entire_width(data), curr_best, curr_best_f);\n            step(data, curr_best);\n        }\n\n        // one iteration of the optimization method\n        // (gives a proper, but not necessarily optimal packing)\n        function step(data, max_width) {\n            line = [];\n            real_width = 0;\n            real_height = 0;\n            global_bottom = init_y;\n\n            for (var i = 0; i < data.length; i++) {\n                var o = data[i];\n                put_rect(o, max_width);\n            }\n\n            return Math.abs(get_real_ratio() - desired_ratio);\n        }\n\n        // looking for a position to one box\n        function put_rect(rect, max_width) {\n\n\n            var parent = undefined;\n\n            for (var i = 0; i < line.length; i++) {\n                if ((line[i].space_left >= rect.height) && (line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width) <= packingOptions.FLOAT_EPSILON) {\n                    parent = line[i];\n                    break;\n                }\n            }\n\n            line.push(rect);\n\n            if (parent !== undefined) {\n                rect.x = parent.x + parent.width + packingOptions.PADDING;\n                rect.y = parent.bottom;\n                rect.space_left = rect.height;\n                rect.bottom = rect.y;\n                parent.space_left -= rect.height + packingOptions.PADDING;\n                parent.bottom += rect.height + packingOptions.PADDING;\n            } else {\n                rect.y = global_bottom;\n                global_bottom += rect.height + packingOptions.PADDING;\n                rect.x = init_x;\n                rect.bottom = rect.y;\n                rect.space_left = rect.height;\n            }\n\n            if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON) real_height = rect.y + rect.height - init_y;\n            if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON) real_width = rect.x + rect.width - init_x;\n        };\n\n        function get_entire_width(data) {\n            var width = 0;\n            data.forEach(function (d) { return width += d.width + packingOptions.PADDING; });\n            return width;\n        }\n\n        function get_real_ratio() {\n            return (real_width / real_height);\n        }\n    }\n\n    /**\n     * connected components of graph\n     * returns an array of {}\n     */\n    export function separateGraphs(nodes, links) {\n        var marks = {};\n        var ways = {};\n        var graphs = [];\n        var clusters = 0;\n\n        for (var i = 0; i < links.length; i++) {\n            var link = links[i];\n            var n1 = link.source;\n            var n2 = link.target;\n            if (ways[n1.index])\n                ways[n1.index].push(n2);\n            else\n                ways[n1.index] = [n2];\n\n            if (ways[n2.index])\n                ways[n2.index].push(n1);\n            else\n                ways[n2.index] = [n1];\n        }\n\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            if (marks[node.index]) continue;\n            explore_node(node, true);\n        }\n\n        function explore_node(n, is_new) {\n            if (marks[n.index] !== undefined) return;\n            if (is_new) {\n                clusters++;\n                graphs.push({ array: [] });\n            }\n            marks[n.index] = clusters;\n            graphs[clusters - 1].array.push(n);\n            var adjacent = ways[n.index];\n            if (!adjacent) return;\n\n            for (var j = 0; j < adjacent.length; j++) {\n                explore_node(adjacent[j], false);\n            }\n        }\n\n        return graphs;\n    }\n","import * as powergraph from './powergraph'\nimport {LinkLengthAccessor, symmetricDiffLinkLengths, jaccardLinkLengths, generateDirectedEdgeConstraints} from './linklengths'\nimport {Descent} from './descent'\nimport {Rectangle, Projection, makeEdgeTo, makeEdgeBetween} from './rectangle'\nimport {Calculator} from './shortestpaths'\nimport {TangentVisibilityGraph, TVGPoint} from './geom'\nimport {separateGraphs, applyPacking} from './handledisconnected'\n    /**\n     * The layout process fires three events:\n     *  - start: layout iterations started\n     *  - tick: fired once per iteration, listen to this to animate\n     *  - end: layout converged, you might like to zoom-to-fit or something at notification of this event\n     */\n    export enum EventType { start, tick, end };\n    export interface Event {\n        type: EventType;\n        alpha: number;\n        stress?: number;\n        listener?: () => void;\n    }\n    export interface InputNode {\n        /**\n         * index in nodes array, this is initialized by Layout.start()\n         */\n        index?: number;\n        /**\n         * x and y will be computed by layout as the Node's centroid\n         */\n        x?: number;\n        /**\n         * x and y will be computed by layout as the Node's centroid\n         */\n        y?: number;\n        /**\n         * specify a width and height of the node's bounding box if you turn on avoidOverlaps\n         */\n        width?: number;\n        /**\n         * specify a width and height of the node's bounding box if you turn on avoidOverlaps\n         */\n        height?: number;\n        /**\n         * selective bit mask.  !=0 means layout will not move.\n         */\n        fixed?: number;\n    }\n    export interface Node extends InputNode {\n      // Client-passed node may be missing these properties, which will be set\n      // upon ingestion\n      x: number;\n      y: number;\n    }\n\n    export interface Group {\n        bounds?: Rectangle;\n        leaves?: Node[];\n        groups?: Group[];\n        padding?: number;\n    }\n\n    function isGroup(g: any): g is Group {\n        return typeof g.leaves !== 'undefined' || typeof g.groups !== 'undefined';\n    }\n\n    export interface Link<NodeRefType> {\n        source: NodeRefType;\n        target: NodeRefType;\n\n        // ideal length the layout should try to achieve for this link\n        length?: number;\n\n        // how hard we should try to satisfy this link's ideal length\n        // must be in the range: 0 < weight <= 1\n        // if unspecified 1 is the default\n        weight?: number;\n    }\n\n    export type LinkNumericPropertyAccessor = (t: Link<Node | number>) => number;\n\n    export interface LinkLengthTypeAccessor extends LinkLengthAccessor<Link<Node | number>> {\n        getType: LinkNumericPropertyAccessor;\n    }\n    /**\n     * Main interface to cola layout.\n     * @class Layout\n     */\n    export class Layout {\n        private _canvasSize = [1, 1];\n        private _linkDistance: number | LinkNumericPropertyAccessor = 20;\n        private _defaultNodeSize: number = 10;\n        private _linkLengthCalculator = null;\n        private _linkType = null;\n        private _avoidOverlaps = false;\n        private _handleDisconnected = true;\n        private _alpha;\n        private _lastStress;\n        private _running = false;\n        private _nodes = [];\n        private _groups = [];\n        private _rootGroup = null;\n        private _links: Link<Node | number>[] = [];\n        private _constraints = [];\n        private _distanceMatrix = null;\n        private _descent: Descent = null;\n        private _directedLinkConstraints = null;\n        private _threshold = 0.01;\n        private _visibilityGraph = null;\n        private _groupCompactness = 1e-6;\n\n        // sub-class and override this property to replace with a more sophisticated eventing mechanism\n        protected event = null;\n\n        // subscribe a listener to an event\n        // sub-class and override this method to replace with a more sophisticated eventing mechanism\n        public on(e: EventType | string, listener: (event?: Event) => void): this {\n            // override me!\n            if (!this.event) this.event = {};\n            if (typeof e === 'string') {\n                this.event[EventType[e]] = listener;\n            } else {\n                this.event[e] = listener;\n            }\n            return this;\n        }\n\n        // a function that is notified of events like \"tick\"\n        // sub-classes can override this method to replace with a more sophisticated eventing mechanism\n        protected trigger(e: Event) {\n            if (this.event && typeof this.event[e.type] !== 'undefined') {\n                this.event[e.type](e);\n            }\n        }\n\n        // a function that kicks off the iteration tick loop\n        // it calls tick() repeatedly until tick returns true (is converged)\n        // subclass and override it with something fancier (e.g. dispatch tick on a timer)\n        protected kick(): void {\n            while (!this.tick());\n        }\n\n        /**\n         * iterate the layout.  Returns true when layout converged.\n         */\n        protected tick(): boolean {\n            if (this._alpha < this._threshold) {\n                this._running = false;\n                this.trigger({ type: EventType.end, alpha: this._alpha = 0, stress: this._lastStress });\n                return true;\n            }\n            const n = this._nodes.length,\n                  m = this._links.length;\n            let o, i;\n\n            this._descent.locks.clear();\n            for (i = 0; i < n; ++i) {\n                o = this._nodes[i];\n                if (o.fixed) {\n                    if (typeof o.px === 'undefined' || typeof o.py === 'undefined') {\n                        o.px = o.x;\n                        o.py = o.y;\n                    }\n                    var p = [o.px, o.py];\n                    this._descent.locks.add(i, p);\n                }\n            }\n\n            let s1 = this._descent.rungeKutta();\n            //var s1 = descent.reduceStress();\n            if (s1 === 0) {\n                this._alpha = 0;\n            } else if (typeof this._lastStress !== 'undefined') {\n                this._alpha = s1; //Math.abs(Math.abs(this._lastStress / s1) - 1);\n            }\n            this._lastStress = s1;\n\n            this.updateNodePositions();\n\n            this.trigger({ type: EventType.tick, alpha: this._alpha, stress: this._lastStress });\n            return false;\n        }\n\n        // copy positions out of descent instance into each of the nodes' center coords\n        private updateNodePositions(): void {\n            const x = this._descent.x[0], y = this._descent.x[1];\n            let o, i = this._nodes.length;\n            while (i--) {\n                o = this._nodes[i];\n                o.x = x[i];\n                o.y = y[i];\n            }\n        }\n\n        /**\n         * the list of nodes.\n         * If nodes has not been set, but links has, then we instantiate a nodes list here, of the correct size,\n         * before returning it.\n         * @property nodes {Array}\n         * @default empty list\n         */\n        nodes(): Array<Node>\n        nodes(v: Array<InputNode>): this\n        nodes(v?: any): any {\n            if (!v) {\n                if (this._nodes.length === 0 && this._links.length > 0) {\n                    // if we have links but no nodes, create the nodes array now with empty objects for the links to point at.\n                    // in this case the links are expected to be numeric indices for nodes in the range 0..n-1 where n is the number of nodes\n                    var n = 0;\n                    this._links.forEach(function (l) {\n                        n = Math.max(n, <number>l.source, <number>l.target);\n                    });\n                    this._nodes = new Array(++n);\n                    for (var i = 0; i < n; ++i) {\n                        this._nodes[i] = {};\n                    }\n                }\n                return this._nodes;\n            }\n            this._nodes = v;\n            return this;\n        }\n\n        /**\n         * a list of hierarchical groups defined over nodes\n         * @property groups {Array}\n         * @default empty list\n         */\n        groups(): Array<Group>\n        groups(x: Array<Group>): this\n        groups(x?: Array<Group>): any {\n            if (!x) return this._groups;\n            this._groups = x;\n            this._rootGroup = {};\n            this._groups.forEach(g => {\n                if (typeof g.padding === \"undefined\")\n                    g.padding = 1;\n                if (typeof g.leaves !== \"undefined\") {\n                    g.leaves.forEach((v, i) => {\n                        if (typeof v === 'number')\n                            (g.leaves[i] = this._nodes[v]).parent = g\n                    });\n                }\n                if (typeof g.groups !== \"undefined\") {\n                    g.groups.forEach((gi, i) => {\n                        if (typeof gi === 'number')\n                            (g.groups[i] = this._groups[gi]).parent = g\n                    });\n                }\n            });\n            this._rootGroup.leaves = this._nodes.filter(v => typeof v.parent === 'undefined');\n            this._rootGroup.groups = this._groups.filter(g => typeof g.parent === 'undefined');\n            return this;\n        }\n\n        powerGraphGroups(f: Function): this {\n            var g = powergraph.getGroups(this._nodes, this._links, this.linkAccessor, this._rootGroup);\n            this.groups(g.groups);\n            f(g);\n            return this;\n        }\n\n        /**\n         * if true, the layout will not permit overlaps of the node bounding boxes (defined by the width and height properties on nodes)\n         * @property avoidOverlaps\n         * @type bool\n         * @default false\n         */\n        avoidOverlaps(): boolean\n        avoidOverlaps(v: boolean): this\n        avoidOverlaps(v?: boolean): any {\n            if (!arguments.length) return this._avoidOverlaps;\n            this._avoidOverlaps = v;\n            return this;\n        }\n\n        /**\n         * if true, the final step of the start method will be to nicely pack connected components of the graph.\n         * works best if start() is called with a reasonable number of iterations specified and\n         * each node has a bounding box (defined by the width and height properties on nodes).\n         * @property handleDisconnected\n         * @type bool\n         * @default true\n         */\n        handleDisconnected(): boolean\n        handleDisconnected(v: boolean): this\n        handleDisconnected(v?: boolean): any {\n            if (!arguments.length) return this._handleDisconnected;\n            this._handleDisconnected = v;\n            return this;\n        }\n\n        /**\n         * causes constraints to be generated such that directed graphs are laid out either from left-to-right or top-to-bottom.\n         * a separation constraint is generated in the selected axis for each edge that is not involved in a cycle (part of a strongly connected component)\n         * @param axis {string} 'x' for left-to-right, 'y' for top-to-bottom\n         * @param minSeparation {number|link=>number} either a number specifying a minimum spacing required across all links or a function to return the minimum spacing for each link\n         */\n        flowLayout(axis: string, minSeparation: number|((t: any)=>number)): this {\n            if (!arguments.length) axis = 'y';\n            this._directedLinkConstraints = {\n                axis: axis,\n                getMinSeparation: typeof minSeparation === 'number' ? function () { return minSeparation } : minSeparation\n            };\n            return this;\n        }\n\n        /**\n         * links defined as source, target pairs over nodes\n         * @property links {array}\n         * @default empty list\n         */\n        links(): Array<Link<Node|number>>\n        links(x: Array<Link<Node|number>>): this\n        links(x?: Array<Link<Node|number>>): any {\n            if (!arguments.length) return this._links;\n            this._links = x;\n            return this;\n        }\n\n        /**\n         * list of constraints of various types\n         * @property constraints\n         * @type {array}\n         * @default empty list\n         */\n        constraints(): Array<any>\n        constraints(c: Array<any>): this\n        constraints(c?: Array<any>): any {\n            if (!arguments.length) return this._constraints;\n            this._constraints = c;\n            return this;\n        }\n\n        /**\n         * Matrix of ideal distances between all pairs of nodes.\n         * If unspecified, the ideal distances for pairs of nodes will be based on the shortest path distance between them.\n         * @property distanceMatrix\n         * @type {Array of Array of Number}\n         * @default null\n         */\n        distanceMatrix(): Array<Array<number>>\n        distanceMatrix(d: Array<Array<number>>): this\n        distanceMatrix(d?: any): any {\n            if (!arguments.length) return this._distanceMatrix;\n            this._distanceMatrix = d;\n            return this;\n        }\n\n        /**\n         * Size of the layout canvas dimensions [x,y]. Currently only used to determine the midpoint which is taken as the starting position\n         * for nodes with no preassigned x and y.\n         * @property size\n         * @type {Array of Number}\n         */\n        size(): Array<number>\n        size(x: Array<number>): this\n        size(x?: Array<number>): any {\n            if (!x) return this._canvasSize;\n            this._canvasSize = x;\n            return this;\n        }\n\n        /**\n         * Default size (assume nodes are square so both width and height) to use in packing if node width/height are not specified.\n         * @property defaultNodeSize\n         * @type {Number}\n         */\n        defaultNodeSize(): number\n        defaultNodeSize(x: number): this\n        defaultNodeSize(x?: any): any {\n            if (!x) return this._defaultNodeSize;\n            this._defaultNodeSize = x;\n            return this;\n        }\n\n        /**\n         * The strength of attraction between the group boundaries to each other.\n         * @property defaultNodeSize\n         * @type {Number}\n         */\n        groupCompactness(): number\n        groupCompactness(x: number): this\n        groupCompactness(x?: any): any {\n            if (!x) return this._groupCompactness;\n            this._groupCompactness = x;\n            return this;\n        }\n\n        /**\n         * links have an ideal distance, The automatic layout will compute layout that tries to keep links (AKA edges) as close as possible to this length.\n         */\n        linkDistance(): number\n        linkDistance(): LinkNumericPropertyAccessor\n        linkDistance(x: number): this\n        linkDistance(x: LinkNumericPropertyAccessor): this\n        linkDistance(x?: any): any {\n            if (!x) {\n                return this._linkDistance;\n            }\n            this._linkDistance = typeof x === \"function\" ? x : +x;\n            this._linkLengthCalculator = null;\n            return this;\n        }\n\n        linkType(f: Function | number): this {\n            this._linkType = f;\n            return this;\n        }\n\n        convergenceThreshold(): number\n        convergenceThreshold(x: number): this\n        convergenceThreshold(x?: number): any {\n            if (!x) return this._threshold;\n            this._threshold = typeof x === \"function\" ? x : +x;\n            return this;\n        }\n\n        alpha(): number\n        alpha(x: number): this\n        alpha(x?: number): any {\n            if (!arguments.length) return this._alpha;\n            else {\n                x = +x;\n                if (this._alpha) { // if we're already running\n                    if (x > 0) this._alpha = x; // we might keep it hot\n                    else this._alpha = 0; // or, next tick will dispatch \"end\"\n                } else if (x > 0) { // otherwise, fire it up!\n                    if (!this._running) {\n                        this._running = true;\n                        this.trigger({ type: EventType.start, alpha: this._alpha = x});\n                        this.kick();\n                    }\n                }\n                return this;\n            }\n        }\n\n        getLinkLength(link: Link<Node | number>): number {\n            return typeof this._linkDistance === \"function\" ? +((<LinkNumericPropertyAccessor>this._linkDistance)(link)) : <number>this._linkDistance;\n        }\n\n        static setLinkLength(link: Link<Node|number>, length: number) {\n            link.length = length;\n        }\n\n        getLinkType(link: Link<Node | number>): number {\n            return typeof this._linkType === \"function\" ? this._linkType(link) : 0;\n        }\n\n        linkAccessor: LinkLengthTypeAccessor = {\n            getSourceIndex: Layout.getSourceIndex,\n            getTargetIndex: Layout.getTargetIndex,\n            setLength: Layout.setLinkLength,\n            getType: l => typeof this._linkType === \"function\" ? this._linkType(l) : 0\n        };\n\n        /**\n         * compute an ideal length for each link based on the graph structure around that link.\n         * you can use this (for example) to create extra space around hub-nodes in dense graphs.\n         * In particular this calculation is based on the \"symmetric difference\" in the neighbour sets of the source and target:\n         * i.e. if neighbours of source is a and neighbours of target are b then calculation is: sqrt(|a union b| - |a intersection b|)\n         * Actual computation based on inspection of link structure occurs in start(), so links themselves\n         * don't have to have been assigned before invoking this function.\n         * @param {number} [idealLength] the base length for an edge when its source and start have no other common neighbours (e.g. 40)\n         * @param {number} [w] a multiplier for the effect of the length adjustment (e.g. 0.7)\n         */\n        symmetricDiffLinkLengths(idealLength: number, w: number = 1): this {\n            this.linkDistance(l => idealLength * l.length);\n            this._linkLengthCalculator = () => symmetricDiffLinkLengths(this._links, this.linkAccessor, w);\n            return this;\n        }\n\n        /**\n         * compute an ideal length for each link based on the graph structure around that link.\n         * you can use this (for example) to create extra space around hub-nodes in dense graphs.\n         * In particular this calculation is based on the \"symmetric difference\" in the neighbour sets of the source and target:\n         * i.e. if neighbours of source is a and neighbours of target are b then calculation is: |a intersection b|/|a union b|\n         * Actual computation based on inspection of link structure occurs in start(), so links themselves\n         * don't have to have been assigned before invoking this function.\n         * @param {number} [idealLength] the base length for an edge when its source and start have no other common neighbours (e.g. 40)\n         * @param {number} [w] a multiplier for the effect of the length adjustment (e.g. 0.7)\n         */\n        jaccardLinkLengths(idealLength: number, w: number = 1): this {\n            this.linkDistance(l => idealLength * l.length);\n            this._linkLengthCalculator = () => jaccardLinkLengths(this._links, this.linkAccessor, w);\n            return this;\n        }\n\n        /**\n         * start the layout process\n         * @method start\n         * @param {number} [initialUnconstrainedIterations=0] unconstrained initial layout iterations\n         * @param {number} [initialUserConstraintIterations=0] initial layout iterations with user-specified constraints\n         * @param {number} [initialAllConstraintsIterations=0] initial layout iterations with all constraints including non-overlap\n         * @param {number} [gridSnapIterations=0] iterations of \"grid snap\", which pulls nodes towards grid cell centers - grid of size node[0].width - only really makes sense if all nodes have the same width and height\n         * @param [keepRunning=true] keep iterating asynchronously via the tick method\n         * @param [centerGraph=true] Center graph on restart\n         */\n        start(\n            initialUnconstrainedIterations: number = 0,\n            initialUserConstraintIterations: number = 0,\n            initialAllConstraintsIterations: number = 0,\n            gridSnapIterations: number = 0,\n            keepRunning = true,\n            centerGraph = true,\n        ): this {\n            var i: number,\n                j: number,\n                n = (<Array<any>>this.nodes()).length,\n                N = n + 2 * this._groups.length,\n                m = this._links.length,\n                w = this._canvasSize[0],\n                h = this._canvasSize[1];\n\n            var x = new Array(N), y = new Array(N);\n\n            var G = null;\n\n            var ao = this._avoidOverlaps;\n\n            this._nodes.forEach((v, i) => {\n                v.index = i;\n                if (typeof v.x === 'undefined') {\n                    v.x = w / 2, v.y = h / 2;\n                }\n                x[i] = v.x, y[i] = v.y;\n            });\n\n            if (this._linkLengthCalculator) this._linkLengthCalculator();\n\n            //should we do this to clearly label groups?\n            //this._groups.forEach((g, i) => g.groupIndex = i);\n\n            var distances;\n            if (this._distanceMatrix) {\n                // use the user specified distanceMatrix\n                distances = this._distanceMatrix;\n            } else {\n                // construct an n X n distance matrix based on shortest paths through graph (with respect to edge.length).\n                distances = (new Calculator(N, this._links, Layout.getSourceIndex, Layout.getTargetIndex, l=> this.getLinkLength(l))).DistanceMatrix();\n\n                // G is a square matrix with G[i][j] = 1 iff there exists an edge between node i and node j\n                // otherwise 2. (\n                G = Descent.createSquareMatrix(N, () => 2);\n                this._links.forEach(l => {\n                    if (typeof l.source == \"number\") l.source = this._nodes[<number>l.source];\n                    if (typeof l.target == \"number\") l.target = this._nodes[<number>l.target];\n                });\n                this._links.forEach(e => {\n                    const u = Layout.getSourceIndex(e), v = Layout.getTargetIndex(e);\n                    G[u][v] = G[v][u] = e.weight || 1;\n                });\n            }\n\n            var D = Descent.createSquareMatrix(N, function (i, j) {\n                return distances[i][j];\n            });\n\n            if (this._rootGroup && typeof this._rootGroup.groups !== 'undefined') {\n                var i = n;\n                var addAttraction = (i, j, strength, idealDistance) => {\n                    G[i][j] = G[j][i] = strength;\n                    D[i][j] = D[j][i] = idealDistance;\n                };\n                this._groups.forEach(g => {\n                    addAttraction(i, i + 1, this._groupCompactness, 0.1);\n\n                    // todo: add terms here attracting children of the group to the group dummy nodes\n                    //if (typeof g.leaves !== 'undefined')\n                    //    g.leaves.forEach(l => {\n                    //        addAttraction(l.index, i, 1e-4, 0.1);\n                    //        addAttraction(l.index, i + 1, 1e-4, 0.1);\n                    //    });\n                    //if (typeof g.groups !== 'undefined')\n                    //    g.groups.forEach(g => {\n                    //        var gid = n + g.groupIndex * 2;\n                    //        addAttraction(gid, i, 0.1, 0.1);\n                    //        addAttraction(gid + 1, i, 0.1, 0.1);\n                    //        addAttraction(gid, i + 1, 0.1, 0.1);\n                    //        addAttraction(gid + 1, i + 1, 0.1, 0.1);\n                    //    });\n\n                    if (typeof g.bounds === 'undefined') {\n                        x[i] = w / 2, y[i++] = h / 2;\n                        x[i] = w / 2, y[i++] = h / 2;\n                    } else {\n                        x[i] = g.bounds.x, y[i++] = g.bounds.y;\n                        x[i] = g.bounds.X, y[i++] = g.bounds.Y;\n                    }\n                });\n            } else this._rootGroup = { leaves: this._nodes, groups: [] };\n\n            var curConstraints = this._constraints || [];\n            if (this._directedLinkConstraints) {\n                (<any>this.linkAccessor).getMinSeparation = this._directedLinkConstraints.getMinSeparation;\n                curConstraints = curConstraints.concat(generateDirectedEdgeConstraints(n, this._links, this._directedLinkConstraints.axis, <any>(this.linkAccessor)));\n\n                // todo: add containment constraints between group dummy nodes and their children\n            }\n\n            this.avoidOverlaps(false);\n            this._descent = new Descent([x, y], D);\n\n            this._descent.locks.clear();\n            for (var i = 0; i < n; ++i) {\n                var o = this._nodes[i];\n                if (o.fixed) {\n                    o.px = o.x;\n                    o.py = o.y;\n                    var p = [o.x, o.y];\n                    this._descent.locks.add(i, p);\n                }\n            }\n            this._descent.threshold = this._threshold;\n\n            // apply initialIterations without user constraints or nonoverlap constraints\n            // if groups are specified, dummy nodes and edges will be added to untangle\n            // with respect to group connectivity\n            this.initialLayout(initialUnconstrainedIterations, x, y);\n\n            // apply initialIterations with user constraints but no nonoverlap constraints\n            if (curConstraints.length > 0) this._descent.project = new Projection(this._nodes, this._groups, this._rootGroup, curConstraints).projectFunctions();\n            this._descent.run(initialUserConstraintIterations);\n            this.separateOverlappingComponents(w, h, centerGraph);\n\n            // subsequent iterations will apply all constraints\n            this.avoidOverlaps(ao);\n            if (ao) {\n                this._nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\n                this._descent.project = new Projection(this._nodes, this._groups, this._rootGroup, curConstraints, true).projectFunctions();\n                this._nodes.forEach(function (v, i) { x[i] = v.x, y[i] = v.y; });\n            }\n\n            // allow not immediately connected nodes to relax apart (p-stress)\n            this._descent.G = G;\n            this._descent.run(initialAllConstraintsIterations);\n\n            if (gridSnapIterations) {\n                this._descent.snapStrength = 1000;\n                this._descent.snapGridSize = this._nodes[0].width;\n                this._descent.numGridSnapNodes = n;\n                this._descent.scaleSnapByMaxH = n != N; // if we have groups then need to scale hessian so grid forces still apply\n                var G0 = Descent.createSquareMatrix(N,(i, j) => {\n                    if (i >= n || j >= n) return G[i][j];\n                    return 0\n                });\n                this._descent.G = G0;\n                this._descent.run(gridSnapIterations);\n            }\n\n            this.updateNodePositions();\n            this.separateOverlappingComponents(w, h, centerGraph);\n            return keepRunning ? this.resume() : this;\n        }\n\n        private initialLayout(iterations: number, x: number[], y: number[]) {\n            if (this._groups.length > 0 && iterations > 0) {\n                // construct a flat graph with dummy nodes for the groups and edges connecting group dummy nodes to their children\n                // todo: edges attached to groups are replaced with edges connected to the corresponding group dummy node\n                var n = this._nodes.length;\n                var edges = this._links.map(e => <any>{ source: (<Node>e.source).index, target: (<Node>e.target).index });\n                var vs = this._nodes.map(v => <any>{ index: v.index });\n                this._groups.forEach((g, i) => {\n                    vs.push(<any>{ index: g.index = n + i });\n                });\n                this._groups.forEach((g, i) => {\n                    if (typeof g.leaves !== 'undefined')\n                        g.leaves.forEach(v => edges.push({ source: g.index, target: v.index }));\n                    if (typeof g.groups !== 'undefined')\n                        g.groups.forEach(gg => edges.push({ source: g.index, target: gg.index }));\n                });\n\n                // layout the flat graph with dummy nodes and edges\n                new Layout()\n                    .size(this.size())\n                    .nodes(vs)\n                    .links(edges)\n                    .avoidOverlaps(false)\n                    .linkDistance(this.linkDistance())\n                    .symmetricDiffLinkLengths(5)\n                    .convergenceThreshold(1e-4)\n                    .start(iterations, 0, 0, 0, false);\n\n                this._nodes.forEach(v => {\n                    x[v.index] = vs[v.index].x;\n                    y[v.index] = vs[v.index].y;\n                });\n            } else {\n                this._descent.run(iterations);\n            }\n        }\n\n        // recalculate nodes position for disconnected graphs\n        private separateOverlappingComponents(width: number, height: number, centerGraph: boolean = true): void {\n            // recalculate nodes position for disconnected graphs\n            if (!this._distanceMatrix && this._handleDisconnected) {\n                let x = this._descent.x[0], y = this._descent.x[1];\n                this._nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\n                var graphs = separateGraphs(this._nodes, this._links);\n                applyPacking(graphs, width, height, this._defaultNodeSize, 1, centerGraph);\n                this._nodes.forEach((v, i) => {\n                    this._descent.x[0][i] = v.x, this._descent.x[1][i] = v.y;\n                    if (v.bounds) {\n                        v.bounds.setXCentre(v.x);\n                        v.bounds.setYCentre(v.y);\n                    }\n                });\n            }\n        }\n\n        resume(): this {\n            return this.alpha(0.1);\n        }\n\n        stop(): this {\n            return this.alpha(0);\n        }\n\n        /// find a visibility graph over the set of nodes.  assumes all nodes have a\n        /// bounds property (a rectangle) and that no pair of bounds overlaps.\n        prepareEdgeRouting(nodeMargin: number = 0) {\n            this._visibilityGraph = new TangentVisibilityGraph(\n                this._nodes.map(function (v) {\n                    return v.bounds.inflate(-nodeMargin).vertices();\n                }));\n        }\n\n        /**\n         * find a route avoiding node bounds for the given edge.\n         * assumes the visibility graph has been created (by prepareEdgeRouting method)\n         * and also assumes that nodes have an index property giving their position in the\n         * node array.  This index property is created by the start() method.\n         * @param [edge] The edge to generate a route for.\n         * @param {number} [ah] The size of the arrow head, a distance to shorten the end\n         *                      of the edge by.  Defaults to 5.\n         */\n        routeEdge(edge, ah: number = 5, draw) {\n            var lineData = [];\n            //if (d.source.id === 10 && d.target.id === 11) {\n            //    debugger;\n            //}\n            var vg2 = new TangentVisibilityGraph(this._visibilityGraph.P, { V: this._visibilityGraph.V, E: this._visibilityGraph.E }),\n                port1 = <TVGPoint>{ x: edge.source.x, y: edge.source.y },\n                port2 = <TVGPoint>{ x: edge.target.x, y: edge.target.y },\n                start = vg2.addPoint(port1, edge.source.index),\n                end = vg2.addPoint(port2, edge.target.index);\n            vg2.addEdgeIfVisible(port1, port2, edge.source.index, edge.target.index);\n            if (typeof draw !== 'undefined') {\n                draw(vg2);\n            }\n            var sourceInd = e => e.source.id, targetInd = e => e.target.id, length = e => e.length(),\n                spCalc = new Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length),\n                shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);\n            if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {\n                let route = makeEdgeBetween(edge.source.innerBounds, edge.target.innerBounds, ah);\n                lineData = [route.sourceIntersection, route.arrowStart];\n            } else {\n                var n = shortestPath.length - 2,\n                    p = vg2.V[shortestPath[n]].p,\n                    q = vg2.V[shortestPath[0]].p,\n                    lineData = [edge.source.innerBounds.rayIntersection(p.x, p.y)];\n                for (var i = n; i >= 0; --i)\n                    lineData.push(vg2.V[shortestPath[i]].p);\n                lineData.push(makeEdgeTo(q, edge.target.innerBounds, ah));\n            }\n            //lineData.forEach((v, i) => {\n            //    if (i > 0) {\n            //        var u = lineData[i - 1];\n            //        this._nodes.forEach(function (node) {\n            //            if (node.id === getSourceIndex(d) || node.id === getTargetIndex(d)) return;\n            //            var ints = node.innerBounds.lineIntersections(u.x, u.y, v.x, v.y);\n            //            if (ints.length > 0) {\n            //                debugger;\n            //            }\n            //        })\n            //    }\n            //})\n            return lineData;\n        }\n\n        //The link source and target may be just a node index, or they may be references to nodes themselves.\n        static getSourceIndex(e: Link<Node | number>): number {\n            return typeof e.source === 'number' ? <number>e.source : (<Node>e.source).index;\n        }\n\n        //The link source and target may be just a node index, or they may be references to nodes themselves.\n        static getTargetIndex(e: Link<Node | number>): number {\n            return typeof e.target === 'number' ? <number>e.target : (<Node>e.target).index;\n        }\n\n        // Get a string ID for a given link.\n        static linkId(e: Link<Node | number>): string {\n            return Layout.getSourceIndex(e) + \"-\" + Layout.getTargetIndex(e);\n        }\n\n        // The fixed property has three bits:\n        // Bit 1 can be set externally (e.g., d.fixed = true) and show persist.\n        // Bit 2 stores the dragging state, from mousedown to mouseup.\n        // Bit 3 stores the hover state, from mouseover to mouseout.\n        static dragStart(d: Node | Group) {\n            if (isGroup(d)) {\n                Layout.storeOffset(d, Layout.dragOrigin(d));\n            } else {\n                Layout.stopNode(d);\n                d.fixed |= 2; // set bit 2\n            }\n        }\n\n        // we clobber any existing desired positions for nodes\n        // in case another tick event occurs before the drag\n        private static stopNode(v: Node) {\n            (<any>v).px = v.x;\n            (<any>v).py = v.y;\n        }\n\n        // we store offsets for each node relative to the centre of the ancestor group\n        // being dragged in a pair of properties on the node\n        private static storeOffset(d: Group, origin: { x: number, y: number }) {\n            if (typeof d.leaves !== 'undefined') {\n                d.leaves.forEach(v => {\n                    v.fixed |= 2;\n                    Layout.stopNode(v);\n                    (<any>v)._dragGroupOffsetX = v.x - origin.x;\n                    (<any>v)._dragGroupOffsetY = v.y - origin.y;\n                });\n            }\n            if (typeof d.groups !== 'undefined') {\n                d.groups.forEach(g => Layout.storeOffset(g, origin));\n            }\n        }\n\n        // the drag origin is taken as the centre of the node or group\n        static dragOrigin(d: Node | Group): { x: number, y: number } {\n            if (isGroup(d)) {\n                return {\n                    x: d.bounds.cx(),\n                    y: d.bounds.cy()\n                };\n            } else {\n                return d;\n            }\n        }\n\n        // for groups, the drag translation is propagated down to all of the children of\n        // the group.\n        static drag(d: Node | Group, position: { x: number, y: number }) {\n            if (isGroup(d)) {\n                if (typeof d.leaves !== 'undefined') {\n                    d.leaves.forEach(v => {\n                        d.bounds.setXCentre(position.x);\n                        d.bounds.setYCentre(position.y);\n                        (<any>v).px = (<any>v)._dragGroupOffsetX + position.x;\n                        (<any>v).py = (<any>v)._dragGroupOffsetY + position.y;\n                    });\n                }\n                if (typeof d.groups !== 'undefined') {\n                    d.groups.forEach(g => Layout.drag(g, position));\n                }\n            } else {\n                (<any>d).px = position.x;\n                (<any>d).py = position.y;\n            }\n        }\n\n        // we unset only bits 2 and 3 so that the user can fix nodes with another a different\n        // bit such that the lock persists between drags\n        static dragEnd(d) {\n            if (isGroup(d)) {\n                if (typeof d.leaves !== 'undefined') {\n                    d.leaves.forEach(v => {\n                        Layout.dragEnd(v);\n                        delete (<any>v)._dragGroupOffsetX;\n                        delete (<any>v)._dragGroupOffsetY;\n                    });\n                }\n                if (typeof d.groups !== 'undefined') {\n                    d.groups.forEach(Layout.dragEnd);\n                }\n            } else {\n                d.fixed &= ~6; // unset bits 2 and 3\n                //d.fixed = 0;\n            }\n        }\n\n        // in d3 hover temporarily locks nodes, currently not used in cola\n        static mouseOver(d) {\n            d.fixed |= 4; // set bit 3\n            d.px = d.x, d.py = d.y; // set velocity to zero\n        }\n\n        // in d3 hover temporarily locks nodes, currently not used in cola\n        static mouseOut(d) {\n            d.fixed &= ~4; // unset bit 3\n        }\n    }\n","import {Layout, EventType, Event} from './layout'\n\n    export class LayoutAdaptor extends Layout {\n\n        // dummy functions in case not defined by client\n        trigger(e: Event) {};\n        kick() {};\n        drag() {};\n        on(eventType: EventType | string, listener: () => void) : this { return this; };\n\n        dragstart: (d:any) => void;\n        dragStart: (d:any) => void;\n        dragend: (d:any) => void;\n        dragEnd: (d:any) => void;\n\n        constructor( options ) {\n            super();\n\n            // take in implementation as defined by client\n\n            var self = this;\n            var o = options;\n\n            if ( o.trigger ) {\n                this.trigger = o.trigger;\n            }\n\n            if ( o.kick ){\n                this.kick = o.kick;\n            }\n\n            if ( o.drag ){\n                this.drag = o.drag;\n            }\n\n            if ( o.on ){\n                this.on = o.on;\n            }\n\n            this.dragstart = this.dragStart = Layout.dragStart;\n            this.dragend = this.dragEnd = Layout.dragEnd;\n        }\n    }\n\n    /**\n     * provides an interface for use with any external graph system (e.g. Cytoscape.js):\n     */\n    export function adaptor( options ): LayoutAdaptor {\n        return new LayoutAdaptor( options );\n    }\n","////<reference path=\"../extern/d3v3.d.ts\"/>\n////commented out the reference, because the path ended up in the typings, which\n////makes it impossible import in other projects.\n// declare const d3;\n\n\nimport {Layout, EventType, Event} from './layout';\nimport {ID3StyleLayoutAdaptor} from './d3adaptor'\n\n    /**\n     * @internal\n     */\n    export class D3StyleLayoutAdaptor extends Layout implements ID3StyleLayoutAdaptor {\n        protected readonly event: any;\n\n        trigger(e: Event) {\n            var d3event = { type: EventType[e.type], alpha: e.alpha, stress: e.stress };\n            this.event[d3event.type](d3event); // via d3 dispatcher, e.g. event.start(e);\n        }\n\n        // iterate layout using a d3.timer, which queues calls to tick repeatedly until tick returns true\n        kick() {\n            this.d3Context.timer(() => super.tick());\n        }\n\n        // a function to allow for dragging of nodes\n        drag: () => any;\n\n        private d3Context: any;\n\n        constructor(d3Context: any = self.d3) {\n            super();\n            this.d3Context = d3Context;\n            this.event = d3Context.dispatch(EventType[EventType.start], EventType[EventType.tick], EventType[EventType.end]);\n            // bit of trickyness remapping 'this' so we can reference it in the function body.\n            var d3layout = this;\n            var drag;\n            this.drag = function () {\n                if (!drag) {\n                    var drag = d3Context.behavior.drag()\n                        .origin(Layout.dragOrigin)\n                        .on(\"dragstart.d3adaptor\", Layout.dragStart)\n                        .on(\"drag.d3adaptor\", d => {\n                            Layout.drag(d, <any>d3layout.d3Context.event);\n                            d3layout.resume(); // restart annealing\n                        })\n                        .on(\"dragend.d3adaptor\", Layout.dragEnd);\n                }\n\n                if (!arguments.length) return drag;\n\n                // this is the context of the function, i.e. the d3 selection\n                this//.on(\"mouseover.adaptor\", colaMouseover)\n                //.on(\"mouseout.adaptor\", colaMouseout)\n                    .call(drag);\n            }\n        }\n\n        // a function for binding to events on the adapter\n        on(eventType: EventType | string, listener: () => void): this {\n            if (typeof eventType === 'string') {\n                this.event.on(eventType, listener);\n            } else {\n                this.event.on(EventType[eventType], listener);\n            }\n            return this;\n        }\n    }\n","import {dispatch} from 'd3-dispatch'\nimport {timer} from 'd3-timer'\nimport {drag as d3drag} from 'd3-drag'\nimport {Layout, EventType, Event} from './layout'\nimport {ID3StyleLayoutAdaptor} from './d3adaptor'\n\nexport interface D3Context {\n    timer: typeof timer;\n    drag: typeof d3drag;\n    dispatch: typeof dispatch;\n    event: any;\n}\n\n/**\n * @internal\n */\nexport class D3NextStyleLayoutAdaptor extends Layout implements ID3StyleLayoutAdaptor {\n    event:any;\n    trigger(e: Event) {\n        var d3event = { type: EventType[e.type], alpha: e.alpha, stress: e.stress };\n        // the dispatcher is actually expecting something of type EventTarget as the second argument\n        // so passing the thing above is totally abusing the pattern... not sure what to do about this yet\n        this.event.call(d3event.type, <any>d3event); // via d3 dispatcher, e.g. event.start(e);\n    }\n\n    // iterate layout using a d3.timer, which queues calls to tick repeatedly until tick returns true\n    kick() {\n        var t = this.d3Context.timer(() => super.tick() && t.stop());\n    }\n\n    // a function to allow for dragging of nodes\n    drag: () => any;\n\n    /**\n     * @internal\n     */\n    private readonly d3Context: D3Context;\n\n    constructor(d3Context: D3Context) {\n        super();\n        this.d3Context = d3Context;\n        this.event = d3Context.dispatch(EventType[EventType.start], EventType[EventType.tick], EventType[EventType.end]);\n\n        // bit of trickyness remapping 'this' so we can reference it in the function body.\n        var d3layout = this;\n        var drag;\n        this.drag = function () {\n            if (!drag) {\n                var drag = d3Context.drag()\n                    .subject(Layout.dragOrigin)\n                    .on(\"start.d3adaptor\", (event: any, d: any) => Layout.dragStart(d))\n                    .on(\"drag.d3adaptor\", (event: any, d) => {\n                        Layout.drag(<any>d, event);\n                        d3layout.resume(); // restart annealing\n                    })\n                    .on(\"end.d3adaptor\", (event: any, d) => Layout.dragEnd(d));\n            }\n\n            if (!arguments.length) return drag;\n\n            // this is the context of the function, i.e. the d3 selection\n            //this//.on(\"mouseover.adaptor\", colaMouseover)\n            //.on(\"mouseout.adaptor\", colaMouseout)\n            arguments[0].call(drag);\n        }\n    }\n\n    // a function for binding to events on the adapter\n    on(eventType: EventType | string, listener: () => void): this {\n        if (typeof eventType === 'string') {\n            this.event.on(eventType, listener);\n        } else {\n            this.event.on(EventType[eventType], listener);\n        }\n        return this;\n    }\n}\n","import {D3StyleLayoutAdaptor} from './d3v3adaptor'\nimport {D3Context, D3NextStyleLayoutAdaptor} from './d3Nextadaptor'\nimport { Layout, EventType, Event } from './layout';\n\nexport { D3Context } from './d3Nextadaptor';\n\nexport interface D3v3Context { version: string };\n\nexport interface ID3StyleLayoutAdaptor {\n    trigger(e: Event): void;\n    kick(): void;\n    drag: () => any;\n\n    on(eventType: EventType | string, listener: () => void): ID3StyleLayoutAdaptor;\n}\n\n\n/**\n * provides an interface for use with d3:\n * Correct way to create way to construct the d3 cola object is to pass the d3 object into the adaptor function, like so:\n *\n *   `var d3cola = cola.d3adaptor(d3);`\n *\n * Internally, it will figure out if d3 is version 3 or 4 from the version tag and set up the right event forwarding. Defaults to version 3 if the d3 object is not passed.\n * - uses the d3 event system to dispatch layout events such as:\n *   o \"start\" (start layout process)\n *   o \"tick\" (after each layout iteration)\n *   o \"end\" (layout converged and complete).\n * - uses the d3 timer to queue layout iterations.\n * - sets up d3.behavior.drag to drag nodes\n *   o use `node.call(<the returned instance of Layout>.drag)` to make nodes draggable\n * returns an instance of the cola.Layout itself with which the user\n * can interact directly.\n */\nexport function d3adaptor(d3Context?: D3Context | D3v3Context): Layout & ID3StyleLayoutAdaptor {\n    if (!d3Context || isD3V3(d3Context)) {\n        return new D3StyleLayoutAdaptor(d3Context);\n    }\n    return new D3NextStyleLayoutAdaptor(d3Context);\n}\n\nfunction isD3V3(d3Context: D3Context | D3v3Context): d3Context is D3v3Context {\n    const v3exp = /^3\\./;\n    return (<any>d3Context).version && (<any>d3Context).version.match(v3exp) !== null;\n}\n","import {Point} from './geom'\nimport {Rectangle} from './rectangle'\nimport {Constraint, Solver, Variable} from './vpsc'\nimport {Calculator} from './shortestpaths'\n    export interface NodeAccessor<Node>{\n        getChildren(v:Node) : number[];\n        getBounds(v:Node) : Rectangle;\n    }\n    export class NodeWrapper {\n        leaf: boolean;\n        parent: NodeWrapper;\n        ports: Vert[];\n        constructor(public id: number, public rect: Rectangle, public children: number[]) {\n            this.leaf = typeof children === 'undefined' || children.length === 0;\n        }\n    }\n    export class Vert {\n        constructor(public id: number, public x:number, public y: number, public node: NodeWrapper = null, public line = null) {}\n    }\n\n    export class LongestCommonSubsequence<T> {\n        length: number;\n        si: number;\n        ti: number;\n        reversed: boolean;\n        constructor(public s: T[], public t: T[]) {\n            var mf = LongestCommonSubsequence.findMatch(s, t);\n            var tr = t.slice(0).reverse();\n            var mr = LongestCommonSubsequence.findMatch(s, tr);\n            if (mf.length >= mr.length) {\n                this.length = mf.length;\n                this.si = mf.si;\n                this.ti = mf.ti;\n                this.reversed = false;\n            } else {\n                this.length = mr.length;\n                this.si = mr.si;\n                this.ti = t.length - mr.ti - mr.length;\n                this.reversed = true;\n            }\n        }\n        private static findMatch<T>(s: T[], t: T[]) {\n            var m = s.length;\n            var n = t.length;\n            var match = { length: 0, si: -1, ti: -1 };\n            var l = new Array(m);\n            for (var i = 0; i < m; i++) {\n                l[i] = new Array(n);\n                for (var j = 0; j < n; j++)\n                    if (s[i] === t[j]) {\n                        var v = l[i][j] = (i === 0 || j === 0) ? 1 : l[i - 1][j - 1] + 1;\n                        if (v > match.length) {\n                            match.length = v;\n                            match.si = i - v + 1;\n                            match.ti = j - v + 1;\n                        };\n                    } else l[i][j] = 0;\n            }\n            return match;\n        }\n        getSequence(): T[]{\n            return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];\n        }\n    }\n    // a horizontal or vertical line of nodes\n    export interface GridLine {\n        nodes: NodeWrapper[];\n        pos: number;\n    }\n    export class GridRouter<Node> {\n        leaves: NodeWrapper[] = null;\n        groups: NodeWrapper[];\n        nodes: NodeWrapper[];\n        cols: GridLine[];\n        rows: GridLine[];\n        root;\n        verts: Vert[];\n        edges;\n        backToFront;\n        obstacles;\n        passableEdges;\n        private avg(a) { return a.reduce((x, y) => x + y) / a.length }\n\n        // in the given axis, find sets of leaves overlapping in that axis\n        // center of each GridLine is average of all nodes in column\n        private getGridLines(axis): GridLine[] {\n            var columns = [];\n            var ls = this.leaves.slice(0, this.leaves.length);\n            while (ls.length > 0) {\n                // find a column of all leaves overlapping in axis with the first leaf\n                let overlapping = ls.filter(v=> v.rect['overlap' + axis.toUpperCase()](ls[0].rect));\n                let col = {\n                    nodes: overlapping,\n                    pos: this.avg(overlapping.map(v=> v.rect['c' + axis]()))\n                };\n                columns.push(col);\n                col.nodes.forEach(v=> ls.splice(ls.indexOf(v), 1));\n            }\n            columns.sort((a, b) => a.pos - b.pos)\n            return columns;\n        }\n\n        // get the depth of the given node in the group hierarchy\n        private getDepth(v) {\n            var depth = 0;\n            while (v.parent !== this.root) {\n                depth++;\n                v = v.parent;\n            }\n            return depth;\n        }\n\n        // medial axes between node centres and also boundary lines for the grid\n        private midPoints(a) {\n            if (a.length === 1) {\n                return [a[0]]\n            }\n\n            var gap = a[1] - a[0];\n            var mids = [a[0] - gap / 2];\n            for (var i = 1; i < a.length; i++) {\n                mids.push((a[i] + a[i - 1]) / 2);\n            }\n            mids.push(a[a.length - 1] + gap / 2);\n            return mids;\n        }\n\n        constructor(public originalnodes: Node[], accessor: NodeAccessor<Node>, public groupPadding: number = 12) {\n            this.nodes = originalnodes.map((v, i) => new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v)));\n            this.leaves = this.nodes.filter(v=> v.leaf);\n            this.groups = this.nodes.filter(g=> !g.leaf);\n            this.cols = this.getGridLines('x');\n            this.rows = this.getGridLines('y');\n\n            // create parents for each node or group that is a member of another's children\n            this.groups.forEach(v=>\n                v.children.forEach(c=> this.nodes[<number>c].parent = v));\n\n            // root claims the remaining orphans\n            this.root = { children: [] };\n            this.nodes.forEach(v=> {\n                if (typeof v.parent === 'undefined') {\n                    v.parent = this.root;\n                    this.root.children.push(v.id);\n                }\n\n                // each node will have grid vertices associated with it,\n                // some inside the node and some on the boundary\n                // leaf nodes will have exactly one internal node at the center\n                // and four boundary nodes\n                // groups will have potentially many of each\n                v.ports = []\n            });\n\n            // nodes ordered by their position in the group hierarchy\n            this.backToFront = this.nodes.slice(0);\n            this.backToFront.sort((x, y) => this.getDepth(x) - this.getDepth(y));\n\n            // compute boundary rectangles for each group\n            // has to be done from front to back, i.e. inside groups to outside groups\n            // such that each can be made large enough to enclose its interior\n            var frontToBackGroups = this.backToFront.slice(0).reverse().filter(g=> !g.leaf);\n            frontToBackGroups.forEach(v=> {\n                var r = Rectangle.empty();\n                v.children.forEach(c=> r = r.union(this.nodes[c].rect));\n                v.rect = r.inflate(this.groupPadding);\n            });\n\n            var colMids = this.midPoints(this.cols.map(r=> r.pos));\n            var rowMids = this.midPoints(this.rows.map(r=> r.pos));\n\n            // setup extents of lines\n            var rowx = colMids[0], rowX = colMids[colMids.length - 1];\n            var coly = rowMids[0], colY = rowMids[rowMids.length - 1];\n\n            // horizontal lines\n            var hlines = this.rows.map(r=> <any>{ x1: rowx, x2: rowX, y1: r.pos, y2: r.pos })\n                .concat(rowMids.map(m=> <any>{ x1: rowx, x2: rowX, y1: m, y2: m }));\n\n            // vertical lines\n            var vlines = this.cols.map(c=> <any>{ x1: c.pos, x2: c.pos, y1: coly, y2: colY })\n                .concat(colMids.map(m=> <any>{ x1: m, x2: m, y1: coly, y2: colY }));\n\n            // the full set of lines\n            var lines = hlines.concat(vlines);\n\n            // we record the vertices associated with each line\n            lines.forEach(l=> l.verts = []);\n\n            // the routing graph\n            this.verts = [];\n            this.edges = [];\n\n            // create vertices at the crossings of horizontal and vertical grid-lines\n            hlines.forEach(h=>\n                vlines.forEach(v=> {\n                    var p = new Vert(this.verts.length, v.x1, h.y1);\n                    h.verts.push(p);\n                    v.verts.push(p);\n                    this.verts.push(p);\n\n                    // assign vertices to the nodes immediately under them\n                    var i = this.backToFront.length;\n                    while (i-- > 0) {\n                        var node = this.backToFront[i],\n                            r = node.rect;\n                        var dx = Math.abs(p.x - r.cx()),\n                            dy = Math.abs(p.y - r.cy());\n                        if (dx < r.width() / 2 && dy < r.height() / 2) {\n                            (<any>p).node = node;\n                            break;\n                        }\n                    }\n                })\n                );\n\n            lines.forEach((l, li) => {\n                // create vertices at the intersections of nodes and lines\n                this.nodes.forEach((v, i) => {\n                    v.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach((intersect, j) => {\n                        //console.log(li+','+i+','+j+':'+intersect.x + ',' + intersect.y);\n                        var p = new Vert(this.verts.length, intersect.x, intersect.y, v, l);\n                        this.verts.push(p);\n                        l.verts.push(p);\n                        v.ports.push(p);\n                    });\n                });\n\n                // split lines into edges joining vertices\n                var isHoriz = Math.abs(l.y1 - l.y2) < 0.1;\n                var delta = (a, b) => isHoriz ? b.x - a.x : b.y - a.y;\n                l.verts.sort(delta);\n                for (var i = 1; i < l.verts.length; i++) {\n                    var u = l.verts[i - 1], v = l.verts[i];\n                    if (u.node && u.node === v.node && u.node.leaf) continue;\n                    this.edges.push({ source: u.id, target: v.id, length: Math.abs(delta(u, v)) });\n                }\n            });\n\n\n\n        }\n\n        // find path from v to root including both v and root\n        private findLineage(v) {\n            var lineage = [v];\n            do {\n                v = v.parent;\n                lineage.push(v);\n            } while (v !== this.root);\n            return lineage.reverse();\n        }\n\n        // find path connecting a and b through their lowest common ancestor\n        private findAncestorPathBetween(a, b) {\n            var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;\n            while (aa[i] === ba[i]) i++;\n            // i-1 to include common ancestor only once (as first element)\n            return { commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i)) };\n        }\n\n        // when finding a path between two nodes a and b, siblings of a and b on the\n        // paths from a and b to their least common ancestor are obstacles\n        siblingObstacles(a, b) {\n            var path = this.findAncestorPathBetween(a, b);\n            var lineageLookup = {};\n            path.lineages.forEach(v=> lineageLookup[v.id] = {});\n            var obstacles = path.commonAncestor.children.filter(v=> !(v in lineageLookup));\n\n            path.lineages\n                .filter(v=> v.parent !== path.commonAncestor)\n                .forEach(v=> obstacles = obstacles.concat(v.parent.children.filter(c=> c !== v.id)));\n\n            return obstacles.map(v=> this.nodes[v]);\n        }\n\n        // for the given routes, extract all the segments orthogonal to the axis x\n        // and return all them grouped by x position\n        static getSegmentSets(routes, x, y) {\n            // vsegments is a list of vertical segments sorted by x position\n            var vsegments = [];\n            for (var ei = 0; ei < routes.length; ei++) {\n                var route = routes[ei];\n                for (var si = 0; si < route.length; si++) {\n                    var s = <any>route[si];\n                    s.edgeid = ei;\n                    s.i = si;\n                    var sdx = s[1][x] - s[0][x];\n                    if (Math.abs(sdx) < 0.1) {\n                        vsegments.push(s);\n                    }\n                }\n            }\n            vsegments.sort((a, b) => a[0][x] - b[0][x]);\n\n            // vsegmentsets is a set of sets of segments grouped by x position\n            var vsegmentsets = [];\n            var segmentset = null;\n            for (var i = 0; i < vsegments.length; i++) {\n                var s = vsegments[i];\n                if (!segmentset || Math.abs(s[0][x] - segmentset.pos) > 0.1) {\n                    segmentset = { pos: s[0][x], segments: [] };\n                    vsegmentsets.push(segmentset);\n                }\n                segmentset.segments.push(s);\n            }\n            return vsegmentsets;\n        }\n\n        // for all segments in this bundle create a vpsc problem such that\n        // each segment's x position is a variable and separation constraints\n        // are given by the partial order over the edges to which the segments belong\n        // for each pair s1,s2 of segments in the open set:\n        //   e1 = edge of s1, e2 = edge of s2\n        //   if leftOf(e1,e2) create constraint s1.x + gap <= s2.x\n        //   else if leftOf(e2,e1) create cons. s2.x + gap <= s1.x\n        static nudgeSegs(x: string, y: string, routes, segments, leftOf, gap: number) {\n            var n = segments.length;\n            if (n <= 1) return;\n            var vs = segments.map(s => new Variable(s[0][x]));\n            var cs = [];\n            for (var i = 0; i < n; i++) {\n                for (var j = 0; j < n; j++) {\n                    if (i === j) continue;\n                    var s1 = segments[i],\n                        s2 = segments[j],\n                        e1 = s1.edgeid,\n                        e2 = s2.edgeid,\n                        lind = -1,\n                        rind = -1;\n                    // in page coordinates (not cartesian) the notion of 'leftof' is flipped in the horizontal axis from the vertical axis\n                    // that is, when nudging vertical segments, if they increase in the y(conj) direction the segment belonging to the\n                    // 'left' edge actually needs to be nudged to the right\n                    // when nudging horizontal segments, if the segments increase in the x direction\n                    // then the 'left' segment needs to go higher, i.e. to have y pos less than that of the right\n                    if (x == 'x') {\n                        if (leftOf(e1, e2)) {\n                            //console.log('s1: ' + s1[0][x] + ',' + s1[0][y] + '-' + s1[1][x] + ',' + s1[1][y]);\n                            if (s1[0][y] < s1[1][y]) {\n                                lind = j, rind = i;\n                            } else {\n                                lind = i, rind = j;\n                            }\n                        }\n                    } else {\n                        if (leftOf(e1, e2)) {\n                            if (s1[0][y] < s1[1][y]) {\n                                lind = i, rind = j;\n                            } else {\n                                lind = j, rind = i;\n                            }\n                        }\n                    }\n                    if (lind >= 0) {\n                        //console.log(x+' constraint: ' + lind + '<' + rind);\n                        cs.push(new Constraint(vs[lind], vs[rind], gap));\n                    }\n                }\n            }\n            var solver = new Solver(vs, cs);\n            solver.solve();\n            vs.forEach((v, i) => {\n                var s = segments[i];\n                var pos = v.position();\n                s[0][x] = s[1][x] = pos;\n                var route = routes[s.edgeid];\n                if (s.i > 0) route[s.i - 1][1][x] = pos;\n                if (s.i < route.length - 1) route[s.i + 1][0][x] = pos;\n            });\n        }\n\n        static nudgeSegments(routes, x: string, y: string, leftOf: (e1: number, e2: number) => boolean, gap: number) {\n            var vsegmentsets = GridRouter.getSegmentSets(routes, x, y);\n            // scan the grouped (by x) segment sets to find co-linear bundles\n            for (var i = 0; i < vsegmentsets.length; i++) {\n                var ss = vsegmentsets[i];\n                var events = [];\n                for (var j = 0; j < ss.segments.length; j++) {\n                    var s = ss.segments[j];\n                    events.push({ type: 0, s: s, pos: Math.min(s[0][y], s[1][y]) });\n                    events.push({ type: 1, s: s, pos: Math.max(s[0][y], s[1][y]) });\n                }\n                events.sort((a, b) => a.pos - b.pos + a.type - b.type);\n                var open = [];\n                var openCount = 0;\n                events.forEach(e=> {\n                    if (e.type === 0) {\n                        open.push(e.s);\n                        openCount++;\n                    } else {\n                        openCount--;\n                    }\n                    if (openCount == 0) {\n                        GridRouter.nudgeSegs(x, y, routes, open, leftOf, gap);\n                        open = [];\n                    }\n                });\n            }\n        }\n\n        // obtain routes for the specified edges, nicely nudged apart\n        // warning: edge paths may be reversed such that common paths are ordered consistently within bundles!\n        // @param edges list of edges\n        // @param nudgeGap how much to space parallel edge segements\n        // @param source function to retrieve the index of the source node for a given edge\n        // @param target function to retrieve the index of the target node for a given edge\n        // @returns an array giving, for each edge, an array of segments, each segment a pair of points in an array\n        routeEdges<Edge>(edges: Edge[], nudgeGap: number, source: (e: Edge) => number, target: (e: Edge) => number): Point[][][] {\n            var routePaths = edges.map(e=> this.route(source(e), target(e)));\n            var order = GridRouter.orderEdges(routePaths);\n            var routes = routePaths.map(function (e) { return GridRouter.makeSegments(e); });\n            GridRouter.nudgeSegments(routes, 'x', 'y', order, nudgeGap);\n            GridRouter.nudgeSegments(routes, 'y', 'x', order, nudgeGap);\n            GridRouter.unreverseEdges(routes, routePaths);\n            return routes;\n        }\n\n        // path may have been reversed by the subsequence processing in orderEdges\n        // so now we need to restore the original order\n        static unreverseEdges(routes, routePaths) {\n            routes.forEach((segments, i) => {\n                var path = routePaths[i];\n                if ((<any>path).reversed) {\n                    segments.reverse(); // reverse order of segments\n                    segments.forEach(function (segment) {\n                        segment.reverse();  // reverse each segment\n                    });\n                }\n            });\n        }\n\n        static angleBetween2Lines(line1: Point[], line2: Point[]): number {\n            var angle1 = Math.atan2(line1[0].y - line1[1].y,\n                line1[0].x - line1[1].x);\n            var angle2 = Math.atan2(line2[0].y - line2[1].y,\n                line2[0].x - line2[1].x);\n            var diff = angle1 - angle2;\n            if (diff > Math.PI || diff < -Math.PI) {\n                diff = angle2 - angle1;\n            }\n            return diff;\n        }\n\n        // does the path a-b-c describe a left turn?\n        private static isLeft(a, b, c) {\n            return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) <= 0;\n        }\n\n        // for the given list of ordered pairs, returns a function that (efficiently) looks-up a specific pair to\n        // see if it exists in the list\n        private static getOrder(pairs: { l: number; r: number }[]): (l: number, r: number) => boolean {\n            var outgoing = {};\n            for (var i = 0; i < pairs.length; i++) {\n                var p = pairs[i];\n                if (typeof outgoing[p.l] === 'undefined') outgoing[p.l] = {};\n                outgoing[p.l][p.r] = true;\n            }\n            return (l, r) => typeof outgoing[l] !== 'undefined' && outgoing[l][r];\n        }\n\n        // returns an ordering (a lookup function) that determines the correct order to nudge the\n        // edge paths apart to minimize crossings\n        static orderEdges(edges) {\n            var edgeOrder = [];\n            for (var i = 0; i < edges.length - 1; i++) {\n                for (var j = i + 1; j < edges.length; j++) {\n                    var e = edges[i],\n                        f = edges[j],\n                        lcs = new LongestCommonSubsequence(e, f);\n                    var u, vi, vj;\n                    if (lcs.length === 0)\n                        continue; // no common subpath\n                    if (lcs.reversed) {\n                        // if we found a common subpath but one of the edges runs the wrong way,\n                        // then reverse f.\n                        f.reverse();\n                        f.reversed = true;\n                        lcs = new LongestCommonSubsequence(e, f);\n                    }\n                    if ((lcs.si <= 0 || lcs.ti <= 0) &&\n                        (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length)) {\n                        // the paths do not diverge, so make an arbitrary ordering decision\n                        edgeOrder.push({ l: i, r: j });\n                        continue;\n                    }\n                    if (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length) {\n                        // if the common subsequence of the\n                        // two edges being considered goes all the way to the\n                        // end of one (or both) of the lines then we have to\n                        // base our ordering decision on the other end of the\n                        // common subsequence\n                        u = e[lcs.si + 1];\n                        vj = e[lcs.si - 1];\n                        vi = f[lcs.ti - 1];\n                    } else {\n                        u = e[lcs.si + lcs.length - 2];\n                        vi = e[lcs.si + lcs.length];\n                        vj = f[lcs.ti + lcs.length];\n                    }\n                    if (GridRouter.isLeft(u, vi, vj)) {\n                        edgeOrder.push({ l: j, r: i });\n                    } else {\n                        edgeOrder.push({ l: i, r: j });\n                    }\n                }\n            }\n            //edgeOrder.forEach(function (e) { console.log('l:' + e.l + ',r:' + e.r) });\n            return GridRouter.getOrder(edgeOrder);\n        }\n\n        // for an orthogonal path described by a sequence of points, create a list of segments\n        // if consecutive segments would make a straight line they are merged into a single segment\n        // segments are over cloned points, not the original vertices\n        static makeSegments(path: Point[]): Point[][] {\n            function copyPoint(p: Point) {\n                return <Point>{ x: p.x, y: p.y };\n            }\n            var isStraight = (a, b, c) => Math.abs((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) < 0.001;\n            var segments = [];\n            var a = copyPoint(path[0]);\n            for (var i = 1; i < path.length; i++) {\n                var b = copyPoint(path[i]), c = i < path.length - 1 ? path[i + 1] : null;\n                if (!c || !isStraight(a, b, c)) {\n                    segments.push([a, b]);\n                    a = b;\n                }\n            }\n            return segments;\n        }\n\n        // find a route between node s and node t\n        // returns an array of indices to verts\n        route(s: number, t: number): Point[] {\n            var source = this.nodes[<number>s], target = this.nodes[<number>t];\n            this.obstacles = this.siblingObstacles(source, target);\n\n            var obstacleLookup = {};\n            this.obstacles.forEach(o => obstacleLookup[o.id] = o);\n            this.passableEdges = this.edges.filter(e=> {\n                var u = this.verts[e.source],\n                    v = this.verts[e.target];\n                return !(u.node && u.node.id in obstacleLookup\n                    || v.node && v.node.id in obstacleLookup);\n            });\n\n            // add dummy segments linking ports inside source and target\n            for (var i = 1; i < source.ports.length; i++) {\n                var u = source.ports[0].id;\n                var v = source.ports[i].id;\n                this.passableEdges.push({\n                    source: u,\n                    target: v,\n                    length: 0\n                });\n            }\n            for (var i = 1; i < target.ports.length; i++) {\n                var u = target.ports[0].id;\n                var v = target.ports[i].id;\n                this.passableEdges.push({\n                    source: u,\n                    target: v,\n                    length: 0\n                });\n            }\n\n            var getSource = e=> e.source,\n                getTarget = e=> e.target,\n                getLength = e=> e.length;\n\n            var shortestPathCalculator = new Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);\n            var bendPenalty = (u, v, w) => {\n                var a = this.verts[u], b = this.verts[v], c = this.verts[w];\n                var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);\n                // don't count bends from internal node edges\n                if (a.node === source && a.node === b.node || b.node === target && b.node === c.node)\n                    return 0;\n                return dx > 1 && dy > 1 ? 1000 : 0;\n            };\n\n            // get shortest path\n            var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(\n                source.ports[0].id, target.ports[0].id,\n                bendPenalty);\n\n            // shortest path is reversed and does not include the target port\n            var pathPoints = shortestPath.reverse().map(vi => this.verts[vi]);\n            pathPoints.push(this.nodes[target.id].ports[0]);\n\n            // filter out any extra end points that are inside the source or target (i.e. the dummy segments above)\n            return pathPoints.filter((v, i) =>\n                !(i < pathPoints.length - 1 && pathPoints[i + 1].node === source && v.node === source\n                    || i > 0 && v.node === target && pathPoints[i - 1].node === target));\n        }\n\n        static getRoutePath(route: Point[][], cornerradius: number, arrowwidth: number, arrowheight: number): { routepath: string; arrowpath: string } {\n            var result = {\n                routepath: 'M ' + route[0][0].x + ' ' + route[0][0].y + ' ',\n                arrowpath: ''\n            };\n            if (route.length > 1) {\n                for (var i = 0; i < route.length; i++) {\n                    var li = route[i];\n                    var x = li[1].x, y = li[1].y;\n                    var dx = x - li[0].x;\n                    var dy = y - li[0].y;\n                    if (i < route.length - 1) {\n                        if (Math.abs(dx) > 0) {\n                            x -= dx / Math.abs(dx) * cornerradius;\n                        } else {\n                            y -= dy / Math.abs(dy) * cornerradius;\n                        }\n                        result.routepath += 'L ' + x + ' ' + y + ' ';\n                        var l = route[i + 1];\n                        var x0 = l[0].x, y0 = l[0].y;\n                        var x1 = l[1].x;\n                        var y1 = l[1].y;\n                        dx = x1 - x0;\n                        dy = y1 - y0;\n                        var angle = GridRouter.angleBetween2Lines(li, l) < 0 ? 1 : 0;\n                        //console.log(cola.GridRouter.angleBetween2Lines(li, l))\n                        var x2, y2;\n                        if (Math.abs(dx) > 0) {\n                            x2 = x0 + dx / Math.abs(dx) * cornerradius;\n                            y2 = y0;\n                        } else {\n                            x2 = x0;\n                            y2 = y0 + dy / Math.abs(dy) * cornerradius;\n                        }\n                        var cx = Math.abs(x2 - x);\n                        var cy = Math.abs(y2 - y);\n                        result.routepath += 'A ' + cx + ' ' + cy + ' 0 0 ' + angle + ' ' + x2 + ' ' + y2 + ' ';\n                    } else {\n                        var arrowtip = [x, y];\n                        var arrowcorner1, arrowcorner2;\n                        if (Math.abs(dx) > 0) {\n                            x -= dx / Math.abs(dx) * arrowheight;\n                            arrowcorner1 = [x, y + arrowwidth];\n                            arrowcorner2 = [x, y - arrowwidth];\n                        } else {\n                            y -= dy / Math.abs(dy) * arrowheight;\n                            arrowcorner1 = [x + arrowwidth, y];\n                            arrowcorner2 = [x - arrowwidth, y];\n                        }\n                        result.routepath += 'L ' + x + ' ' + y + ' ';\n                        if (arrowheight > 0) {\n                            result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\n                            + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\n                        }\n                    }\n                }\n            } else {\n                var li = route[0];\n                var x = li[1].x, y = li[1].y;\n                var dx = x - li[0].x;\n                var dy = y - li[0].y;\n                var arrowtip = [x, y];\n                var arrowcorner1, arrowcorner2;\n                if (Math.abs(dx) > 0) {\n                    x -= dx / Math.abs(dx) * arrowheight;\n                    arrowcorner1 = [x, y + arrowwidth];\n                    arrowcorner2 = [x, y - arrowwidth];\n                } else {\n                    y -= dy / Math.abs(dy) * arrowheight;\n                    arrowcorner1 = [x + arrowwidth, y];\n                    arrowcorner2 = [x - arrowwidth, y];\n                }\n                result.routepath += 'L ' + x + ' ' + y + ' ';\n                if (arrowheight > 0) {\n                    result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\n                    + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\n                }\n            }\n            return result;\n        }\n    }\n","import {Calculator} from './shortestpaths'\nimport {Descent} from './descent'\nimport {Projection, GraphNode, Rectangle} from './rectangle'\nimport {Variable} from './vpsc'\nimport {jaccardLinkLengths, LinkLengthAccessor} from './linklengths'\n\nexport class Link3D {\n        length: number;\n        constructor(public source: number, public target: number) { }\n        actualLength(x: number[][]) {\n            return Math.sqrt(\n                x.reduce((c: number, v: number[]) => {\n                    const dx = v[this.target] - v[this.source];\n                    return c + dx * dx;\n                }, 0));\n        }\n    }\n    export class Node3D implements GraphNode {\n        // if fixed, layout will not move the node from its specified starting position\n        fixed: boolean;\n        width: number;\n        height: number;\n        px: number;\n        py: number;\n        bounds: Rectangle;\n        variable: Variable;\n        constructor(\n            public x: number = 0,\n            public y: number = 0,\n            public z: number = 0) { }\n    }\n    export class Layout3D {\n        static dims = ['x', 'y', 'z'];\n        static k = Layout3D.dims.length;\n        result: number[][];\n        constraints: any[] = null;\n\n        constructor(public nodes: Node3D[], public links: Link3D[], public idealLinkLength: number = 1) {\n            this.result = new Array(Layout3D.k);\n            for (var i = 0; i < Layout3D.k; ++i) {\n                this.result[i] = new Array(nodes.length);\n            }\n            nodes.forEach((v, i) => {\n                for (var dim of Layout3D.dims) {\n                    if (typeof v[dim] == 'undefined') v[dim] = Math.random();\n                }\n                this.result[0][i] = v.x;\n                this.result[1][i] = v.y;\n                this.result[2][i] = v.z;\n            });\n        };\n\n        linkLength(l: Link3D): number {\n            return l.actualLength(this.result);\n        }\n\n        useJaccardLinkLengths: boolean = true;\n\n        descent: Descent;\n        start(iterations: number = 100): Layout3D {\n            const n = this.nodes.length;\n\n            var linkAccessor = new LinkAccessor();\n\n            if (this.useJaccardLinkLengths)\n                jaccardLinkLengths(this.links, linkAccessor, 1.5);\n\n            this.links.forEach(e => e.length *= this.idealLinkLength);\n\n            // Create the distance matrix that Cola needs\n            const distanceMatrix = (new Calculator(n, this.links,\n                e=> e.source, e=> e.target, e => e.length)).DistanceMatrix();\n\n            const D = Descent.createSquareMatrix(n, (i, j) => distanceMatrix[i][j]);\n\n            // G is a square matrix with G[i][j] = 1 iff there exists an edge between node i and node j\n            // otherwise 2.\n            var G = Descent.createSquareMatrix(n, function () { return 2 });\n            this.links.forEach(({ source, target }) => G[source][target] = G[target][source] = 1);\n\n            this.descent = new Descent(this.result, D);\n            this.descent.threshold = 1e-3;\n            this.descent.G = G;\n            //let constraints = this.links.map(e=> <any>{\n            //    axis: 'y', left: e.source, right: e.target, gap: e.length*1.5\n            //});\n            if (this.constraints)\n                this.descent.project = new Projection(<GraphNode[]>this.nodes, null, null, this.constraints).projectFunctions();\n\n            for (var i = 0; i < this.nodes.length; i++) {\n                var v = this.nodes[i];\n                if (v.fixed) {\n                    this.descent.locks.add(i, [v.x, v.y, v.z]);\n                }\n            }\n\n            this.descent.run(iterations);\n            return this;\n        }\n\n        tick(): number {\n            this.descent.locks.clear();\n            for (var i = 0; i < this.nodes.length; i++) {\n                var v = this.nodes[i];\n                if (v.fixed) {\n                    this.descent.locks.add(i, [v.x, v.y, v.z]);\n                }\n            }\n            return this.descent.rungeKutta();\n        }\n    }\n\n    class LinkAccessor implements LinkLengthAccessor<any> {\n        getSourceIndex(e: any): number { return e.source; }\n        getTargetIndex(e: any): number { return e.target; }\n        getLength(e: any): number { return e.length; }\n        setLength(e: any, l: number) { e.length = l; }\n    }\n","import {Node, Link, Layout} from './layout'\nimport {GridRouter} from './gridrouter'\nimport {Point} from './geom'\n\n/**\n * @property nudgeGap spacing between parallel edge segments\n * @property margin space around nodes\n * @property groupMargin space around groups\n */\nexport function gridify(pgLayout, nudgeGap: number, margin: number, groupMargin: number) {\n    pgLayout.cola.start(0, 0, 0, 10, false);\n    let gridrouter = route(pgLayout.cola.nodes(), pgLayout.cola.groups(), margin, groupMargin);\n    return gridrouter.routeEdges<any>(pgLayout.powerGraph.powerEdges, nudgeGap, e=> e.source.routerNode.id, e=> e.target.routerNode.id);\n}\n\nfunction route(nodes, groups, margin: number, groupMargin: number) {\n    nodes.forEach(d => {\n        d.routerNode = <any>{\n            name: d.name,\n            bounds: d.bounds.inflate(-margin)\n        };\n    });\n    groups.forEach(d => {\n        d.routerNode = <any>{\n            bounds: d.bounds.inflate(-groupMargin),\n            children: (typeof d.groups !== 'undefined' ? d.groups.map(c=> nodes.length + c.id) : [])\n                .concat(typeof d.leaves !== 'undefined' ? d.leaves.map(c=> c.index) : [])\n        };\n    });\n    let gridRouterNodes = nodes.concat(groups).map((d, i) => {\n        d.routerNode.id = i;\n        return d.routerNode;\n    });\n    return new GridRouter(gridRouterNodes, {\n        getChildren: (v: any) => v.children,\n        getBounds: v => v.bounds\n    }, margin - groupMargin);\n}\n\nexport function powerGraphGridLayout(\n    graph: { nodes: Node[], links: Link<Node>[] },\n    size: number[],\n    grouppadding: number)\n{\n    // compute power graph\n    var powerGraph;\n    graph.nodes.forEach((v,i) => (<any>v).index = i);\n    new Layout()\n        .avoidOverlaps(false)\n        .nodes(graph.nodes)\n        .links(graph.links)\n        .powerGraphGroups(function (d) {\n            powerGraph = d;\n            powerGraph.groups.forEach(v=> v.padding = grouppadding);\n        });\n\n    // construct a flat graph with dummy nodes for the groups and edges connecting group dummy nodes to their children\n    // power edges attached to groups are replaced with edges connected to the corresponding group dummy node\n    var n = graph.nodes.length;\n    var edges = [];\n    var vs = graph.nodes.slice(0);\n    vs.forEach((v, i) => (<any>v).index = i);\n    powerGraph.groups.forEach(g => {\n        var sourceInd = g.index = g.id + n;\n        vs.push(g);\n        if (typeof g.leaves !== 'undefined')\n            g.leaves.forEach(v => edges.push({ source: sourceInd, target: v.index }));\n        if (typeof g.groups !== 'undefined')\n            g.groups.forEach(gg => edges.push({ source: sourceInd, target: gg.id + n }));\n    });\n    powerGraph.powerEdges.forEach(e=> {\n        edges.push({ source: e.source.index, target: e.target.index });\n    });\n\n    // layout the flat graph with dummy nodes and edges\n    new Layout()\n        .size(size)\n        .nodes(vs)\n        .links(edges)\n        .avoidOverlaps(false)\n        .linkDistance(30)\n        .symmetricDiffLinkLengths(5)\n        .convergenceThreshold(1e-4)\n        .start(100, 0, 0, 0, false);\n\n    // final layout taking node positions from above as starting positions\n    // subject to group containment constraints\n    // and then gridifying the layout\n    return {\n        cola:\n            new Layout()\n            .convergenceThreshold(1e-3)\n            .size(size)\n            .avoidOverlaps(true)\n            .nodes(graph.nodes)\n            .links(graph.links)\n        //.flowLayout('y', 30)\n            .groupCompactness(1e-4)\n            .linkDistance(30)\n            .symmetricDiffLinkLengths(5)\n            .powerGraphGroups(function (d) {\n                powerGraph = d;\n                powerGraph.groups.forEach(function (v) {\n                    v.padding = grouppadding\n                });\n            }).start(50, 0, 100, 0, false),\n        powerGraph: powerGraph\n    };\n}\n"],"names":["PowerEdge","source","target","type","Configuration","n","edges","linkAccessor","rootGroup","modules","Array","roots","initModulesFromGroup","push","ModuleSet","i","add","Module","R","length","forEach","e","s","getSourceIndex","t","getTargetIndex","getType","outgoing","incoming","group","moduleSet","leaves","node","module","id","groups","j","child","definition","prop","hasOwnProperty","LinkSets","merge","a","b","k","inInt","intersection","outInt","children","m","update","o","forAll","ms","linktype","nls","remove","count","rootMerges","rs","merges","ctr","i_","nEdges","greedyMerge","sort","getGroupHierarchy","retargetedEdges","root","toGroups","es","allEdges","gid","getEdges","isLeaf","g","isIsland","isPredefined","edgetype","v","Object","keys","table","other","result","intersectionCount","contains","f","mid","vs","forAllModules","sets","Number","lt","getGroups","nodes","links","la","c","powerEdges","end","unionCount","u","getNeighbours","neighbours","addNeighbours","computeLinkLengths","w","l","setLength","symmetricDiffLinkLengths","Math","sqrt","jaccardLinkLengths","min","generateDirectedEdgeConstraints","axis","components","stronglyConnectedComponents","constraints","ui","vi","left","right","gap","getMinSeparation","numVertices","index","stack","strongConnect","lowlink","onStack","out","component","pop","map","Locks","x","locks","clear","isEmpty","apply","Descent","D","G","PseudoRandom","H","Hd","d","ia","ib","xtmp","minD","MAX_VALUE","createSquareMatrix","M","offsetDir","random","getNextBetween","computeDerivatives","d2","Huu","maxH","maxDisplaces","distanceSquared","dx","rd","distance","idealDistance","weight","isFinite","idealDistSquared","gs","distanceCubed","hs","console","log","max","r","snapGridSize","snapStrength","numNodes","numGridSnapNodes","xiu","q","abs","scaleSnapByMaxH","p","dotProd","rightMultiply","computeStepSize","numerator","denominator","reduceStress","alpha","takeDescentStep","computeStress","copy","stepAndProject","x0","stepSize","project","mApply","matrixApply","computeNextPosition","beta","run","iterations","stress","converged","rungeKutta","threshold","disp","nMinus1","rl","seed","getNext","range","PositionStats","scale","addVariable","ai","bi","offset","wi","AB","AD","desiredPosition","A2","getPosn","Constraint","equality","slack","unsatisfiable","position","Variable","dfdv","block","ps","posn","visitNeighbours","prev","ff","next","active","cOut","cIn","Block","vars","updateWeightedPosition","compute_lm","postAction","_dfdv","lm","populateSplitBlock","traverse","visit","acc","findMinLM","findMinLMBetween","lv","rv","findPath","to","endFound","isActiveDirectedPathBetween","split","createSplitBlock","startVar","splitBetween","vl","vr","bs","constraint","lb","rb","mergeAcross","dist","cost","sum","Blocks","list","blockInd","insert","last","swapBlock","updateBlockPositions","inactive","Solver","LAGRANGIAN_TOLERANCE","nb","cs","setStartingPositions","setDesiredPositions","mostViolated","minSlack","deletePoint","ZERO_UPPERBOUND","satisfy","solve","lastcost","removeOverlapInOneDimension","spans","lowerBound","upperBound","desiredCenter","size","leftMost","rightMost","leftMostSize","rightMostSize","vLower","vUpper","solver","newCenters","slice","TreeBase","data","res","_root","iter","iterator","_comparator","_cursor","_ancestors","get_child","find","_bound","cmp","reverse_cmp","Iterator","each","cb","it","reach","cur","tree","_tree","_minNode","save","_maxNode","start","Node","red","dir","set_child","val","RBTree","comparator","ret","head","undefined","gp","ggp","is_red","dir2","single_rotate","double_rotate","found","sr","sibling","gpc","computeGroupBounds","bounds","reduce","union","Rectangle","empty","inflate","padding","X","y","Y","POSITIVE_INFINITY","NEGATIVE_INFINITY","cx","cy","overlapX","ux","vx","overlapY","uy","vy","setXCentre","setYCentre","dy","width","height","lineIntersections","x1","y1","x2","y2","sides","intersections","lineIntersection","rayIntersection","ints","vertices","x3","y3","x4","y4","dx12","dx34","dy12","dy34","dx31","dy31","numa","numb","pad","makeEdgeBetween","ah","si","ti","al","sourceIntersection","targetIntersection","arrowStart","makeEdgeTo","pos","makeRBTree","Event","isOpen","compareEvents","xRect","getCentre","getOpen","getClose","getSize","makeRect","open","close","center","findNeighbours","findXNeighbours","yRect","findYNeighbours","generateGroupConstraints","minSep","isContained","gn","ln","childConstraints","ccs","concat","minVar","maxVar","variable","generateConstraints","gapAdjustment","rect","N","assert","events","scanline","makeConstraint","sep","forward","reverse","mkcon","findIter","uovervX","generateXConstraints","generateYConstraints","generateXGroupConstraints","generateYGroupConstraints","removeOverlaps","IndexedVariable","Projection","avoidOverlaps","variables","createConstraints","w2","h2","stiffness","createSeparation","makeFeasible","dim","offsets","nextPos","createAlignment","xConstraints","yConstraints","isSep","filter","setupVariablesAndBounds","y0","desired","getDesired","fixed","fixedWeight","h","ix","iy","xProject","px","xmin","xmax","p2","yProject","py","ymin","ymax","projectFunctions","updateNodeBounds","updateGroupBounds","starting","PairingHeap","elem","subheaps","toString","selector","str","needComma","subheap","isHeap","lessThan","every","obj","heap2","removeMin","mergePairs","firstPair","remaining","decreaseKey","newValue","setHeapNode","newHeap","pairingNode","PriorityQueue","top","arg","reduceKey","heapNode","newKey","Neighbour","QueueEntry","Calculator","getLength","DistanceMatrix","dijkstraNeighbours","DistancesFromNode","PathFromNodeToNode","PathFromNodeToNodeWithPrevCost","prevCost","qu","visitedFrom","neighbour","viduid","cc","path","dest","Point","LineSegment","PolyPoint","isLeft","P0","P1","P2","above","vj","below","ConvexHull","S","P","minmin","minmax","maxmin","maxmax","bot","clockwiseRadialSweep","atan2","tangent_PointPolyC","V","Vclosed","rtan","Rtangent_PointPolyC","ltan","Ltangent_PointPolyC","upA","dnC","floor","dnA","tangent_PolyPolyC","W","t1","t2","cmp1","cmp2","ix1","ix2","done","LRtangent_PolyPolyC","RLtangent_PolyPolyC","LLtangent_PolyPolyC","RRtangent_PolyPolyC","BiTangent","BiTangents","TVGPoint","VisibilityVertex","polyid","polyvertid","vv","VisibilityEdge","TangentVisibilityGraph","g0","pj","E","Pi","Pj","tangents","addEdgeIfVisible","i1","i2","intersectsPolys","addPoint","poly","intersects","int","bt","v1","v2","v3","w1","w3","v1v2w2","v2w1w2","v2w2w3","w1w2v2","w2v1v2","w2v2v3","ll","rr","lr","isPointInsidePoly","isAnyPInQ","polysOverlap","packingOptions","PADDING","GOLDEN_SECTION","FLOAT_EPSILON","MAX_INERATIONS","applyPacking","graphs","node_size","desired_ratio","centerGraph","init_x","init_y","svg_width","svg_height","real_width","real_height","min_width","global_bottom","line","calculate_bb","put_nodes_to_right_positions","calculate_single_bb","graph","min_x","min_y","max_x","max_y","array","corner","curr_best_f","curr_best","get_entire_width","iterationCounter","f_x1","f_x2","flag","df","step","max_width","put_rect","get_real_ratio","parent","space_left","bottom","separateGraphs","marks","ways","clusters","link","n1","n2","explore_node","is_new","adjacent","EventType","isGroup","Layout","setLinkLength","_linkType","on","listener","event","trigger","kick","tick","_alpha","_threshold","_running","_lastStress","_nodes","_descent","s1","updateNodePositions","_links","_groups","_rootGroup","gi","powerGraphGroups","powergraph","arguments","_avoidOverlaps","handleDisconnected","_handleDisconnected","flowLayout","minSeparation","_directedLinkConstraints","_constraints","distanceMatrix","_distanceMatrix","_canvasSize","defaultNodeSize","_defaultNodeSize","groupCompactness","_groupCompactness","linkDistance","_linkDistance","_linkLengthCalculator","linkType","convergenceThreshold","getLinkLength","getLinkType","idealLength","initialUnconstrainedIterations","initialUserConstraintIterations","initialAllConstraintsIterations","gridSnapIterations","keepRunning","ao","distances","addAttraction","strength","curConstraints","initialLayout","separateOverlappingComponents","G0","resume","gg","stop","prepareEdgeRouting","nodeMargin","_visibilityGraph","routeEdge","edge","draw","lineData","vg2","port1","port2","sourceInd","targetInd","spCalc","shortestPath","route","innerBounds","linkId","dragStart","storeOffset","dragOrigin","stopNode","origin","_dragGroupOffsetX","_dragGroupOffsetY","drag","dragEnd","mouseOver","mouseOut","LayoutAdaptor","options","self","dragstart","dragend","eventType","adaptor","D3StyleLayoutAdaptor","d3Context","d3","dispatch","d3layout","behavior","call","d3event","timer","D3NextStyleLayoutAdaptor","subject","d3adaptor","isD3V3","v3exp","version","match","NodeWrapper","leaf","Vert","LongestCommonSubsequence","mf","findMatch","tr","mr","reversed","getSequence","GridRouter","originalnodes","accessor","groupPadding","getBounds","getChildren","cols","getGridLines","rows","ports","backToFront","getDepth","frontToBackGroups","colMids","midPoints","rowMids","rowx","rowX","coly","colY","hlines","vlines","lines","verts","li","intersect","isHoriz","delta","avg","columns","ls","overlapping","toUpperCase","col","splice","indexOf","depth","mids","findLineage","lineage","findAncestorPathBetween","aa","ba","commonAncestor","lineages","siblingObstacles","lineageLookup","obstacles","getSegmentSets","routes","vsegments","ei","edgeid","sdx","vsegmentsets","segmentset","segments","nudgeSegs","leftOf","s2","e1","e2","lind","rind","nudgeSegments","ss","openCount","routeEdges","nudgeGap","routePaths","order","orderEdges","makeSegments","unreverseEdges","segment","angleBetween2Lines","line1","line2","angle1","angle2","diff","PI","getOrder","pairs","edgeOrder","lcs","copyPoint","isStraight","obstacleLookup","passableEdges","getSource","getTarget","shortestPathCalculator","bendPenalty","pathPoints","getRoutePath","cornerradius","arrowwidth","arrowheight","routepath","arrowpath","angle","arrowtip","arrowcorner1","arrowcorner2","Link3D","actualLength","Node3D","z","Layout3D","idealLinkLength","dims","linkLength","LinkAccessor","useJaccardLinkLengths","descent","gridify","pgLayout","margin","groupMargin","cola","gridrouter","powerGraph","routerNode","name","gridRouterNodes","powerGraphGridLayout","grouppadding"],"mappings":"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"}